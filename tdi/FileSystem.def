DEFINITION MODULE FileSystem;

FROM SYSTEM IMPORT WORD, ADDRESS;

TYPE
  Response = (done(*0*),
  notdone(*1*),
  notsupported(*2*),
  callerror(*3*),
  unknownmedium(*4*),
  unknownfile(*5*),
  paramerror(*6*),
  toomanyfiles(*7*),
  eom(*8*),
  deviceoff(*9*),
  softparityerror(*10*),
  softprotected(*11*),
  softerror(*12*),
  hardparityerror(*13*),
  hardprotected(*14*),
  timeout(*15*),
  harderror(*16*));

TYPE Flag = (
  er, (* error occured *)
  ef, (* eof reached *)
  rd, (* read access mode *)
  wr, (* write access mode *)
  bytemode,
  ag, (* again; reread the last character *)
  tmp, (* file is temporary *)
  dirty);

TYPE FlagSet = SET OF Flag;

TYPE File = RECORD
   res    : Response;
   bufa   : ADDRESS;
   flags  : FlagSet;
   eof    : BOOLEAN;
   handle : INTEGER;
   name   : ARRAY [0..39] OF CHAR;
   endpos : LONGCARD;
   buffpos: LONGCARD;
   filepos: LONGCARD;
   bufflen: CARDINAL;
   again  : WORD;
 END;
       
(* 1 *) PROCEDURE Create(VAR f: File; VAR filename: ARRAY OF CHAR);

(* 2 *) PROCEDURE Close(VAR f: File);

(* 3 *) PROCEDURE Lookup(VAR f: File; VAR filename: ARRAY OF CHAR; newFile: BOOLEAN);

(* 4 *) PROCEDURE Rename(VAR f: File; VAR newname: ARRAY OF CHAR);

(* 5 *) PROCEDURE SetRead(VAR f: File);

(* 6 *) PROCEDURE SetWrite(VAR f: File);

(* 7 *) PROCEDURE SetModify(VAR f: File);

(* 8 *) PROCEDURE SetOpen(VAR f: File);

(* 9 *) PROCEDURE Doio(VAR f: File);

(* 10 *) PROCEDURE SetPos(VAR f: File; pos: LONGCARD);

(* 11 *) PROCEDURE GetPos(VAR f: File; VAR pos: LONGCARD);

(* 12 *) PROCEDURE Length(VAR f: File; VAR length: LONGCARD);

(* 13 *) PROCEDURE Reset(VAR f: File);

(* 14 *) PROCEDURE Again(VAR f: File);

(* 15 *) PROCEDURE ReadWord(VAR f: File; VAR w: WORD);

(* 16 *) PROCEDURE WriteWord(VAR f: File; w: WORD);

(* 17 *) PROCEDURE ReadChar(VAR f: File; VAR ch: CHAR);

(* 18 *) PROCEDURE WriteChar(VAR f: File; ch: CHAR);

END FileSystem.
