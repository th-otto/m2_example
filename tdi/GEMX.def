DEFINITION MODULE GEMX;


FROM SYSTEM IMPORT ADDRESS, PROCESS, LONGWORD;

TYPE ErrorCause = (XError, XRaise, XPropagate);

(* Run time errors *)

TYPE ErrorType = (
  EM1111TRAP (*0*),
  EM1010TRAP (*1*),
  PrivilegeViolationTRAP (*2*),
  ArithOverflowTRAP (*3*),
  OutOfRangeTRAP (*4*),
  ZeroDivideTRAP (*5*),
  IllegalInstrTRAP (*6*),
  AdrErrorTRAP (*7*),
  BusErrorTRAP (*8*),
  ProgramHalt (*9*),
  NoFunctionReturn (*10*),
  CaseIndexRange (*11*),
  StackOverflow (*12*),
  OutOfRange (*13*),
  ArithOverflow (*14*),
  NewprocessWorkspace (*15*),
  ProcessTerminated (*16*),
  UnimlpementedRoutine (*17*),
  NormalReturn (*18*),
  User1 (*19*),
  User2 (*20*),
  User3 (*21*),
  User4 (*22*));

TYPE ErrorContextType = RECORD
                       Error  : INTEGER;
                       CameFrom  : ErrorCause;
                       PC  : ADDRESS;
                       SR  : CARDINAL;
                       A5  : ADDRESS;
                       A6  : ADDRESS;
                       A7  : ADDRESS;
                       LastMP  : ADDRESS;
                       DumpToDo: BOOLEAN;
                       FileToDump: ARRAY [0..22] OF CHAR;
                     END;
                   
TYPE ErrorProcessorType = PROCEDURE();

TYPE BasePageType = RECORD
   LowTPA   : ADDRESS;
   HiTPA    : ADDRESS;
   CodeBase : ADDRESS;
   CodeLen  : LONGCARD;
   DataBase : ADDRESS;
   DataLen  : LONGCARD;
   BssBase  : ADDRESS;
   BssLen   : LONGCARD;
   DtaPtr   : ADDRESS;
   ParentBasePage: ADDRESS;
   resvd1   : LONGCARD;
   EnvPtr   : POINTER TO ARRAY [0..79] OF CHAR;
   resvd2   : ARRAY [48..127] OF CHAR;
   CmdLine  : ARRAY [0..79] OF CHAR;
END;
               
VAR BasePageAddress: POINTER TO BasePageType;
VAR ErrorProcessor: ErrorProcessorType;
VAR ErrorContext: ErrorContextType;

(* 1 *) PROCEDURE CASEX();

(* 2 *) PROCEDURE HALTX();

(* 3 *) PROCEDURE STACKTEST();

(* 4 *) PROCEDURE NEWPROCESS(p: PROC; a: ADDRESS; stacksize: LONGCARD; VAR p1: PROCESS; irqlevel: LONGCARD);

(* 5 *) PROCEDURE TRANSFER();

(* 6 *) PROCEDURE IOTRANSFER();

(* 7 *) PROCEDURE SYSCALL();

(* 8 *) PROCEDURE MULU32(a, b: LONGCARD);

(* 9 *) PROCEDURE DIVU32(a, b: LONGCARD);

(* 10 *) PROCEDURE MULS32(a, b: LONGINT);

(* 11 *) PROCEDURE DIVS32(a, b: LONGINT);

(* 12 *) PROCEDURE FADD(a, b: REAL);

(* 13 *) PROCEDURE FSUB(a, b: REAL);

(* 14 *) PROCEDURE FMUL(a, b: REAL);

(* 15 *) PROCEDURE FDIV(a, b: REAL);

(* 16 *) PROCEDURE FCMP(a, b: REAL);

(* 17 *) PROCEDURE FTST(a: REAL);

(* 18 *) PROCEDURE FLOATX(a: LONGWORD);

(* 19 *) PROCEDURE TRUNCX(a: REAL);

(* 20 *) PROCEDURE LFADD(a, b: LONGREAL);

(* 21 *) PROCEDURE LFSUB(a, b: LONGREAL);

(* 22 *) PROCEDURE LFMUL(a, b: LONGREAL);

(* 23 *) PROCEDURE LFDIV(a, b: LONGREAL);

(* 24 *) PROCEDURE LFCMP(a, b: LONGREAL);

(* 25 *) PROCEDURE LFTST(a: LONGREAL);

(* 26 *) PROCEDURE LFLOATX(a: LONGWORD);

(* 27 *) PROCEDURE LTRUNCX(a: LONGREAL);

(* 28 *) PROCEDURE LENGTHEN(a: REAL);

(* 29 *) PROCEDURE SHORTEN(a: LONGREAL);

END GEMX.
