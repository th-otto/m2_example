DEFINITION MODULE BIOS;

FROM SYSTEM IMPORT ADDRESS;

TYPE MDPtr = POINTER TO MD;

TYPE MD = RECORD
  mlink  : MDPtr;
  mstart : ADDRESS;
  mlength: LONGCARD;
  mown   : ADDRESS;
END;
     
TYPE MPB = RECORD
  mpmfl  : MDPtr;
  mpmal  : MDPtr;
  morover: MDPtr;
END;
      
TYPE Device = (PRT, AUX, CON, HSS, KDB, RAW);

TYPE RW = (Read, Write, ReadNoMediaChange, WriteNoMediaChange);

TYPE MCState = (NoChange, MayHaveChanged, Changed);

TYPE BPBPtr = POINTER TO BPB;

TYPE BPB = RECORD
  recsiz : CARDINAL;
  clsiz  : CARDINAL;
  clsizb : CARDINAL;
  rdlen  : CARDINAL;
  fsiz   : CARDINAL;
  fatrec : CARDINAL;
  datrec : CARDINAL;
  numcl  : CARDINAL;
  bflags : CARDINAL;
END;
      
TYPE DriveSet = SET OF [0..31];

TYPE KBShiftBits = (RightShift, LeftShift, ControlKey, AlternateKey, CapsLock, RightMouseButton, LeftMMouseButton);

TYPE KBShifts = SET OF KBShiftBits;

PROCEDURE GetMPB(VAR mpb: MPB);

(* return input status of device.
   dev: the device to return status of.
   returns: TRUE => characters waiting to be read.
 *)
PROCEDURE BConStat(dev: Device): BOOLEAN;

(* return output status of device.
   dev: the device to return status of.
   returns: TRUE => no characters waiting to be written.
 *)
PROCEDURE BCosStat(dev: Device): BOOLEAN;

(* read character from device. (waits for character)
   dev: the device to read from.
   returns: character. For CON, IBM-PC compatible scan code in
     hi word, character in low word.
 *)
PROCEDURE BConIn(dev: Device): LONGCARD;

(* write character to device. (waits for device ready)
   dev: the device to write to.
   c: the character to write.
 *)
PROCEDURE BConOut(dev: Device; ch: CHAR);

(* read/write absolute sectors.

   rw: the type of read/write operation.
   buf: the buffer to write from/read to.
   count: number of sectors to transfer.
   recno: logical sector number to start transfer at,
   dev: device, 0 => A:, 1 => B:, > 2 for hard disk, network, etc.

   returns: 0 => OK, otherwise error code.
 *)
PROCEDURE RWAbs(mode: RW; buffer: ADDRESS; count: CARDINAL; recno: CARDINAL; dev: CARDINAL): LONGINT;

(* set exception vector.

   vecnum: vector to set.
   vec: the code to execute on exception.

   returns: old vector.

   notes: $00-$FF: reserved for 68000
          $100-$107: reserved for GEMDOS.
                     $100 = system timer interrupt,
                     $101 = critical error handler.
                     $102 = Process terminate hook.
 *)
PROCEDURE SetException(excno: CARDINAL; p: PROC);

(* get exception vector.
   vecnum: as for SetException.
   returns: current exception handler address.
 *)
PROCEDURE GetException(excno: CARDINAL): ADDRESS;

(* get timer calibration value.

   returns: timer calibration value to nearest millisecond.
 *)
PROCEDURE TimerCalibration(): LONGCARD;

(* get bios parameter block for device.

   dev: device to get BPB for; 0 => A:, 1 => B: etc.

   returns: 0 => BPB can't be determined, otherwise address of
              parameter block.
 *)
PROCEDURE GetBPB(dev: CARDINAL): BPBPtr;

(* returns media change state for a device.

   dev: the device to return change state of, 0 => A:, etc.

   returns: the media change state.
 *)
PROCEDURE MediaChange(dev: CARDINAL): MCState;

(* return drives on line.

   returns: 1 in bit position means drive on line, otherwise
              no drive connected.
 *)
PROCEDURE DriveMap(): DriveSet;

(* set keyboard shift key state.
   keys: the new keyboard shift key state.
 *)
PROCEDURE SetKBShift(keys: KBShifts);

(* return keyboard shift key state.
   returns: the current keyboard shift key state.
 *)
PROCEDURE GetKBShift(): KBShifts;

END BIOS.
