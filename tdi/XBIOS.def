DEFINITION MODULE XBIOS;

FROM SYSTEM IMPORT BYTE, ADDRESS;

TYPE MouseType = (DisableMouse, RelativeMouse, AbsoluteMouse, UnusedMouse, KeycodeMouse);

TYPE ParamBlk = RECORD
   topMode  : (OriginBottom, OriginTop);
   buttons  : BYTE;
   xParam   : BYTE;
   yParam   : BYTE;
   xMax     : CARDINAL;
   yMax     : CARDINAL;
   xinitial : CARDINAL;
   yInitial : CARDINAL;
END;
           
TYPE Palette = ARRAY [0..15] OF CARDINAL;

TYPE FlowFlavor = (NONE, XONXOFF, RTSCTS, XONXOFFRTSCTS);

TYPE SerialDevice = (RS232, Keyboard, MIDI);

TYPE SerialSpeed = (BPS19200, BPS9600, BPS4800, BPS3600, BPS2400, BPS2000,
                 BPS1800,  BPS1200, BPS600,  BPS300,  BPS200,  BPS150,
                 BPS134,   BPS110,  BPS75,   BPS50);

TYPE IORECPTR = POINTER TO IOREC;
TYPE IOREC = RECORD
    ibuf     : ADDRESS;
    ibufsize : CARDINAL;
    ibufhd   : CARDINAL;
    ibuftl   : CARDINAL;
    ibuflow  : CARDINAL;
    ibufhi   : CARDINAL;
END;
        
TYPE PrtConfig = (DaisyWheel,    (* dot/daisy *)
               Monochrome,    (* colour/mono *)
               EpsonPrinter,  (* Atari/Epson *)
               Final,         (* draft/final *)
               RS232Port,     (* parallel/RS232 *)
               SingleSheet,   (* form-feed/single sheet *)
               PC6, PC7, PC8, (* unused: *)
               PC9, PC10, PC11,
               PC12, PC13, PC14,
               PC15);

TYPE PrtConfigSet = SET OF PrtConfig;

CONST NoAlter = PrtConfigSet(0FFFFH);

TYPE KeyTransPtr = POINTER TO KeyTrans;

TYPE KeyTrans = ARRAY [0..127] OF BYTE;

TYPE KeyTablePtr = POINTER TO KeyTable;

TYPE KeyTable = RECORD
   unshift  : KeyTransPtr;
   shift    : KeyTransPtr;
   capslock : KeyTransPtr;
END;
           
CONST Low = 0;
CONST Medium = 1;
CONST High = 2;

CONST VirginMedia = 0E5E5H;

TYPE Timer = (TimerA, TimerB, TimerC, TimerD);

TYPE KBVectorPtr = POINTER TO KBVector;

TYPE KBVector = RECORD
   midi    : ADDRESS;
   kbderr  : ADDRESS;
   midierr : ADDRESS;
   statvec : ADDRESS;
   mousevec: ADDRESS;
   clockvec: ADDRESS;
   joyvec  : ADDRESS;
END;
           
(* 1 *) PROCEDURE InitMouse(mtyp: MouseType; VAR param: ParamBlk; serveproc: PROC);

(* 2 *) PROCEDURE ScreenPhysicalBase(): ADDRESS;

(* 3 *) PROCEDURE ScreenLogicalBase(): ADDRESS;

(* 4 *) PROCEDURE GetResolution(): INTEGER;

(* 5 *) PROCEDURE SetScreenBase(logLoc, physLoc: ADDRESS; rez: INTEGER);

(* 6 *) PROCEDURE SetPalette(VAR palette: Palette);

(* 7 *) PROCEDURE SetColour(colorNum, color: CARDINAL): CARDINAL;

(* 8 *) PROCEDURE FloppyRead(buffer: ADDRESS; drive: CARDINAL; sector, track, side: CARDINAL; count: CARDINAL): INTEGER;

(* 9 *) PROCEDURE FloppyWrite(buffer: ADDRESS; drive: CARDINAL; sector, track, side: CARDINAL; count: CARDINAL): INTEGER;

(* 10 *) PROCEDURE FloppyFormat(buffer: ADDRESS; drive: CARDINAL; spt, track, side: CARDINAL; interleave: CARDINAL; virgin: CARDINAL): INTEGER;

(* 11 *) PROCEDURE MIDIWS(VAR str: ARRAY OF BYTE; len: CARDINAL);

(* 12 *) PROCEDURE MFPint(intNo: CARDINAL; vector: PROC);

(* 13 *) PROCEDURE IORec(dev: SerialDevice): IORECPTR;

(* 14 *) PROCEDURE ConfigureRS232(baud: SerialSpeed; handshake: FlowFlavor; ucr, rsr, tsr, scr: INTEGER);

(* 15 *) PROCEDURE SetKeyTable(VAR unshift, shift, capslock: KeyTransPtr): KeyTablePtr;

(* 16 *) PROCEDURE Random(): LONGCARD;

(* 17 *) PROCEDURE PrototypeBootSector(buffer: ADDRESS; serialNo: LONGINT; disktype: INTEGER; execFlag: INTEGER);

(* 18 *) PROCEDURE FloppyVerify(buffer: ADDRESS; drive: CARDINAL; sector, track, side: CARDINAL; count: CARDINAL): INTEGER;

(* 19 *) PROCEDURE ScreenDump();

(* 20 *) PROCEDURE ConfigureCursor(mode, rate: INTEGER): INTEGER;

(* 21 *) PROCEDURE SetDateTime(datetime: LONGCARD);

(* 22 *) PROCEDURE GetDateTime(): LONGCARD;

(* 23 *) PROCEDURE BiosKeys();

(* 24 *) PROCEDURE KeyboardWS(VAR str: ARRAY OF BYTE; len: CARDINAL);

(* 25 *) PROCEDURE DisableInterrupt(intNo: CARDINAL);

(* 26 *) PROCEDURE EnableInterrupt(intNo: CARDINAL);

(* 27 *) PROCEDURE GIRead(regno: CARDINAL): CARDINAL;

(* 28 *) PROCEDURE GIWrite(regno: CARDINAL; data: CARDINAL);

(* 29 *) PROCEDURE GIOffBit(bitno: CARDINAL);

(* 30 *) PROCEDURE GIOnBit(bitno: CARDINAL);

(* 31 *) PROCEDURE SetTimerInterrupt(which: Timer; control, data: CARDINAL; vec: PROC);

(* 32 *) PROCEDURE DoSound(data: ADDRESS);

(* 33 *) PROCEDURE ConfigurePrinter(config: PrtConfigSet): PrtConfigSet;

(* 34 *) PROCEDURE KeyboardVectors(): KBVectorPtr;

(* 35 *) PROCEDURE KeyboardRate(initial, repeat: INTEGER): CARDINAL;

(* 36 *) PROCEDURE VSync();

(* 37 *) PROCEDURE SuperExec(Code: PROC);

(* 38 *) PROCEDURE PuntAES();

END XBIOS.
