DEFINITION MODULE GEMDOS;

(* ---------------------------------------------------------------------

        Modula-2 interface to GEM Disk Operating System

   For full documentation on the GEMDOS interface please see the GEMDOS
   manual.

   --------------------------------------------------------------------- *)

(* GEM is a registered trademark of Digital Research Inc. *)


(* ---------------------------------------------------------------------- *)
(* (c) Copyright 1986, 1987  Modula-2 Software Ltd.  All Rights Reserved. *)
(* ---------------------------------------------------------------------- *)
(* (c) Copyright 1986, 1987  TDI Software, Inc.      All Rights Reserved. *)
(* ---------------------------------------------------------------------- *)


FROM SYSTEM IMPORT ADDRESS;

CONST
  (* BIOS error codes *)
  EOK           =   0;
  Error         =  -1;
  EDrvNR        =  -2;         (* Drive not ready *)
  EUnCmd        =  -3;         (* Unknown command *)
  ECRC          =  -4;         (* CRC error *)
  EBadRq        =  -5;         (* Bad request *)
  ESeek         =  -6;         (* Seek error *)
  EMedia        =  -7;         (* Unknown media *)
  ESecNF        =  -8;         (* Sector not found *)
  EPaper        =  -9;         (* No paper *)
  EWritF        = -10;         (* Write fault *)
  EReadF        = -11;         (* Read fault *)
  EGenrl        = -12;         (* General error *)
  EWrPro        = -13;         (* Write protect *)
  EChng         = -14;         (* Media change *)
  EUnDev        = -15;         (* Unknown device *)
  EBadSF        = -16;         (* Bad sectors on format *)
  EOther        = -17;         (* Insert other disk *)

  (* BDOS Error codes *)
  EInvFN        = -32;         (* Invalid function number *)
  EFilNF        = -33;         (* File not found *)
  EPthNF        = -34;         (* Path not found *)
  ENHndl        = -35;         (* No handles left *)
  EAccDn        = -36;         (* Access denied *)
  EIHndl        = -37;         (* Invalid handle *)
  ENSMem        = -39;         (* Insufficient memory *)
  EIMBA         = -40;         (* Invalid memory block address *)
  EDrive        = -46;         (* Invaild drive specified *)
  ENMFil        = -49;         (* No more files *)

  (* Other errors *)
  ERange        = -64;         (* Range error *)
  EIntrn        = -65;         (* Internal error *)
  EPLFmt        = -66;         (* Invalid program load format *)
  EGSBF         = -67;         (* Setblock failure due to growth restr *)

TYPE
  IOMode = (read, write);

  SeekMode = (beginning, relative, end);

  ExecMode = (loadExecute, resrvd1, resrvd2, load, execute, createBasepage, executeAndFree, createBPwMode);

  SetOrGet = (set, get);

  DiskInfoBuffer = RECORD
                     freeSpace   : LONGCARD; (* in clusters *)
                     clusters    : LONGCARD; (* num on disk *)
                     sectorSize  : LONGCARD; (* in bytes *)
                     clusterSize : LONGCARD; (* sectors per cluster *)
                   END;

(* Terminate process (old version) *)
PROCEDURE OldTerm();

(* Read character from standard input *)
PROCEDURE ConIn(VAR Ch: CHAR);

(* Read character and scan code from standard input *)
PROCEDURE ConScanIn(VAR Ch, Scan: CHAR);

(* Write character to standard output *)
PROCEDURE ConOut(Ch: CHAR);

(* Read character from auxiliary port *)
PROCEDURE AuxIn(VAR Ch: CHAR);

(* Write character to auxiliary port *)
PROCEDURE AuxOut(Ch: CHAR);

(* Write character to printer port *)
PROCEDURE PrnOut(Ch: CHAR);

(* Raw IO to standard input/output device *)
PROCEDURE RawIO(VAR Ch: CHAR; Mode: IOMode);

(* Raw input from standard input *)
PROCEDURE RawIn(VAR Ch: CHAR);

(* Raw input of character and scan code from standard input *)
PROCEDURE RawScanIn(VAR Ch, Scan: CHAR);

(* Read character from standard input with no echo *)
PROCEDURE NecIn(VAR Ch: CHAR);

(* Write null terminated string to standard output device *)
PROCEDURE ConWS(VAR String: ARRAY OF CHAR);

(* Read edited string from standard input device *)
PROCEDURE ConRS(VAR String: ARRAY OF CHAR);

(* Return status of standard input *)
PROCEDURE ConIS(): BOOLEAN;

(* Set default drive *)
PROCEDURE SetDrv(Drive: CARDINAL; VAR DriveMap: LONGCARD);

(* Return output status of standard output *)
PROCEDURE ConOS(): BOOLEAN;

(* Return output status of standard printer *)
PROCEDURE PrnOS(): BOOLEAN;

(* Return status of standard auxiliary *)
PROCEDURE AuxIS(): BOOLEAN;

(* Return output status of standard auxiliary *)
PROCEDURE AuxOS(): BOOLEAN;

(* Register 'Alternative' RAM with GEMDOS *)
PROCEDURE Maddalt(start: ADDRESS; size: LONGCARD): LONGINT;

(* Allocate screen memory *)
PROCEDURE Srealloc(size: LONGCARD): LONGINT;

(* Get default drive *)
PROCEDURE GetDrv(VAR Drive: CARDINAL);

(* Set disk transfer address *)
PROCEDURE SetDTA(Address: ADDRESS);

(* Get Date *)
PROCEDURE GetDate(VAR Date: CARDINAL);

(* Set Date *)
PROCEDURE SetDate(Date: CARDINAL);

(* Get Date *)
PROCEDURE GetTime(VAR Time: CARDINAL);

(* Set Date *)
PROCEDURE SetTime(Time: CARDINAL);

(* Get disk transfer address *)
PROCEDURE GetDTA(VAR Addr: ADDRESS);

(* Get version number *)
PROCEDURE Version(VAR Ver: CARDINAL);

(* Terminate and stay resident *)
PROCEDURE TermRes(NumBytes: LONGCARD; ExitCode: CARDINAL);

(* Configuration of parts of the operating system *)
PROCEDURE Sconfig(mode: INTEGER; flags: LONGCARD): LONGINT;

(* Get drive free space *)
PROCEDURE DFree(VAR InfoBuffer: DiskInfoBuffer; Drive: CARDINAL);

(* Create a subdirectory *)
PROCEDURE DirCreate(VAR Path: ARRAY OF CHAR): BOOLEAN;

(* Delete a subdirectory *)
PROCEDURE DirDelete(VAR Path: ARRAY OF CHAR): BOOLEAN;

(* Set current directory *)
PROCEDURE SetPath(VAR Path: ARRAY OF CHAR): BOOLEAN;

(* Create a file *)
PROCEDURE Create(VAR Name: ARRAY OF CHAR; Attr: CARDINAL; VAR Handle: INTEGER);

(* Open a file *)
PROCEDURE Open(VAR Name: ARRAY OF CHAR; Mode: CARDINAL; VAR Handle: INTEGER);

(* Close a file *)
PROCEDURE Close(Handle: INTEGER): BOOLEAN;

(* Read file *)
PROCEDURE Read(Handle: INTEGER; VAR Count: LONGCARD; Buffer: ADDRESS);

(* Write file *)
PROCEDURE Write(Handle: INTEGER; VAR Count: LONGCARD; Buffer: ADDRESS);

(* Delete file *)
PROCEDURE Delete(VAR Name: ARRAY OF CHAR): BOOLEAN;

(* Seek file pointer *)
PROCEDURE Seek(Offset: LONGINT; Handle: INTEGER; Mode: SeekMode; VAR Position: LONGCARD);

(* Get/Set file attributes *)
PROCEDURE Attrib(VAR Name: ARRAY OF CHAR; Which: SetOrGet; VAR Attr: CARDINAL);

(* 'Mxalloc': extended Alloc-function for the Atari TT. *)
PROCEDURE Xalloc(Bytes: LONGCARD; mode: CARDINAL; VAR Addr: ADDRESS);

(* 'Fdup': returns a copy of a standard-handle (0-5) *)
PROCEDURE Dup(stdHandle: INTEGER; VAR newHandle: INTEGER);

(* 'Fforce': Redirect standard file *)
PROCEDURE Force(stdHandle, newHandle: INTEGER): BOOLEAN;

(* Get current directory *)
PROCEDURE GetPath(VAR PathName: ARRAY OF CHAR; Drive: CARDINAL);

(* Allocate memory *)
PROCEDURE Alloc(Bytes: LONGCARD; VAR Addr: ADDRESS);

(* Free memory *)
PROCEDURE Free(Addr: ADDRESS): BOOLEAN;

(* Shrink size of allocated memory *)
PROCEDURE Shrink(Addr: ADDRESS; NewSize: LONGCARD): BOOLEAN;

(* Load or execute a process *)
(* Buggy binding: depending on mode,
   Name and/or Tail can be NULL. EnvStr can always be NULL;
   for createBasepage at least, Result is a pointer *)
PROCEDURE Exec(Mode: ExecMode; VAR Name: ARRAY OF CHAR;
                 VAR Tail: ARRAY OF CHAR; VAR EnvStr: ARRAY OF CHAR;
                 VAR Result: INTEGER);
(* correct binding *)
PROCEDURE Pexec(Mode: CARDINAL; Name, Arguments, Environment: ADDRESS; VAR Result: LONGINT);


(* Terminate a process *)
(* Why BOOLEAN? that function does not return *)
PROCEDURE Term(Code: INTEGER): BOOLEAN;

(* Search for first file *)
PROCEDURE SFirst(VAR Name: ARRAY OF CHAR; Attr: CARDINAL; VAR Result: INTEGER);

(* Search for next file *)
PROCEDURE SNext(VAR Result: INTEGER);

(* Rename a file *)
(* Why no return value here? *)
PROCEDURE Rename(VAR CurrentName, NewName: ARRAY OF CHAR);

(* Get/Set file date and time stamp *)
PROCEDURE DaTime(Handle: INTEGER; Buffer: ADDRESS; Which: SetOrGet);

(* enter supervisor mode if stack = 0, otherwise come out of
   supervisor mode with the given stack. *)
PROCEDURE Super(VAR stack: ADDRESS);

END GEMDOS.
