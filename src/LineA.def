DEFINITION MODULE LineA;
#define REF


(*  Megamax Modula-2 Line-A-Routinen
 *
 *  Autor: Manuel Chakravarty
 *
 *  Created: 7.4.1987           Version 2.1   V#0069
 *)
 
 
(*
 *      HINWEIS: Bei der Verwendung der Line-A-Routine ist eine gewisse Vor-
 *               sicht geboten, da diese auf eventuellen Nachfolgermodellen
 *               des Atari ST wahrscheinlich nicht mehr auf diese Weise unter-
 *               stuetzt werden und darauf aufbauende Programme dann nicht
 *               mehr lauffaehig sein koennten.
 *
 *      Die Line-A-Routinen stellen die grundlegenden Ausgabemoeglichkeiten
 *      des ATARI ST dar. Mit ihrer Hilfe kann man sowohl Striche, wie auch
 *      Zeichen auf den Bildschirm bannen. Das gesamte GEM ist auf diese
 *      Routinen aufgesetzt, was natuerlich bedingt, dass die Line-A-Funktionen
 *      den VDI Routinen an Geschwindigkeit und Flexibilitaet ueberlegen sind.
 *      Dafuer sind sie weniger komplex und komfortabel.
 *      Die Line-A-Prozeduren arbeiten auf den Line-A-Variablen, dies ist
 *      ein statischer Variablenbereich, der ermittelt und manipuliert wer-
 *      den kann. Diese Variablen enthalten einen Grossteil der, fuer die
 *      Routinen notwendigen, Parameter. Welche Variablen eine Routine aus-
 *      wertet wird in ihrer Beschreibung angegeben.
 *)


FROM SYSTEM     IMPORT BYTE, ADDRESS, INTEGER16, CARDINAL16;

FROM GrafBase   IMPORT WordBitSet, WritingMode, BitOperation, Point, Rectangle,
                       PtrMouseFormDef, PtrMemFormDef;

FROM GEMBase IMPORT PtrVDIContrlArray, PtrIntinArray;
 
 
TYPE    PtrByteArray            = POINTER TO ARRAY[0..65535] OF BYTE;
        PtrIntArray             = POINTER TO ARRAY[0..65535] OF INTEGER16;
        PtrCardArray            = POINTER TO ARRAY[0..65535] OF CARDINAL16;
        
        SystemFont              = (font6x6, font8x8, font8x16);
        PtrFontHeader           = POINTER TO FontHeader;
        FontHeader              = RECORD
                                    id           : CARDINAL16;
                                    size         : INTEGER16;
                                    name         : ARRAY[0..31] OF CHAR;
                                    minADE       : CARDINAL16;
                                    maxADE       : CARDINAL16;
                                    topToBase    : CARDINAL16;
                                    ascentToBase : CARDINAL16;
                                    halfToBase   : CARDINAL16;
                                    descentToBase: CARDINAL16;
                                    bottomToBase : CARDINAL16;
                                    maxCharWidth : CARDINAL16;
                                    maxBoxWidth  : CARDINAL16;
                                    leftOffset   : INTEGER16;
                                    rightOffset  : INTEGER16;
                                    thickening   : CARDINAL16;
                                    underLineH   : CARDINAL16;
                                    lightMask    : CARDINAL16;
                                    skewMask     : CARDINAL16;
                                    flags        : WordBitSet;
                                    horOffsetTab : PtrIntArray;
                                    charOffsetTab: PtrIntArray;
                                    fontData     : PtrCardArray;
                                    formWidth    : CARDINAL16;
                                    formHeight   : CARDINAL16;
                                    next         : PtrFontHeader;
                                  END;
        PtrSysFontHeader        = POINTER TO ARRAY SystemFont OF PtrFontHeader;
        
        (*  Definition der Line-A-Varaible.
         *  Eine genauere Beschreibung ist im Handbuch zu finden.
         *)
        LineAVars               = RECORD
                                    planes       : CARDINAL16;
                                    bytesPerLine : CARDINAL16;
                                    contrl       : PtrVDIContrlArray;
                                    intin        : PtrIntinArray;
                                    ptsin        : PtrIntArray;
                                    intout       : PtrIntArray;
                                    ptsout       : PtrIntArray;
                                    plane1       : INTEGER16;
                                    plane2       : INTEGER16;
                                    plane3       : INTEGER16;
                                    plane4       : INTEGER16;
                                    lastLine     : INTEGER16;
                                    lineMask     : CARDINAL16;
                                    writingMode  : WritingMode;
                                    p            : Point;
                                    q            : Point;
                                    patternPtr   : PtrCardArray;
                                    patternMask  : CARDINAL16;
                                    multiFill    : INTEGER16;
                                    clipping     : INTEGER16;
                                    minClip      : Point;
                                    maxClip      : Point;
                                    scaleAcc     : CARDINAL16;
                                    scaleFactor  : CARDINAL16;
                                    scaleMode    : WordBitSet;
                                    monoStatus   : INTEGER16;
                                    source       : Point;
                                    dest         : Point;
                                    width        : CARDINAL16;
                                    height       : CARDINAL16;
                                    formBase     : PtrCardArray;
                                    formWidth    : INTEGER16;
                                    style        : WordBitSet;
                                    lightMask    : CARDINAL16;
                                    skewMask     : CARDINAL16;
                                    weight       : CARDINAL16;
                                    rightOff     : INTEGER16;
                                    leftOff      : INTEGER16;
                                    scale        : INTEGER16;
                                    chup         : CARDINAL16;
                                    textFg       : CARDINAL16;
                                    scratchArea  : PtrCardArray;
                                    scratchOff2  : CARDINAL16;
                                    textBg       : CARDINAL16;
                                    copyTrans    : INTEGER16;
                                    seedAbort    : ADDRESS;
                                  END;
        PtrLineAVars            = POINTER TO LineAVars;
        
        NegLineAVars            = RECORD
                                    
                                    (*  Zeichenhoehe
                                     *)
                                    cellHeight   : CARDINAL16;
                                    
                                    (*  Maximale Cursor Spalten- und Zeilen-
                                     *  position.
                                     *)
                                    maxColumn    : CARDINAL16;
                                    maxRow       : CARDINAL16;
                                    
                                    (*  Zeichenzeilenbreite in Bytes
                                     *)
                                    charRowWidth : CARDINAL16;
                                    
                                    (*  Hinter- und Vordergrundfarbe
                                     *)
                                    bgColor      : CARDINAL16;
                                    fgColor      : CARDINAL16;
                                    
                                    (*  Adresse der aktuellen Cursorposition
                                     *)
                                    cursAddr     : ADDRESS;
                                    
                                    (*  Vertikaler Offset zum Anfang des
                                     *  Bildschirms. Siehe auch 'VDIEscapes.
                                     *  SetLineOffset'.
                                     *)
                                    lineOffset   : INTEGER16;
                                    
                                    (*  Spalten- und Zeilenposition des
                                     *  Cursors
                                     *)
                                    cursColumn   : CARDINAL16;
                                    cursRow      : CARDINAL16;
                                    
                                    (*  Blinkgeschw. des Cursors und Zaehler
                                     *  fuer das Cursorblinken.
                                     *)
                                    cursFrequence: BYTE;
                                    cursCount    : BYTE;
                                    
                                    (*  Zeiger auf den Systemzeichensatz
                                     *  Siehe auch 'VDIEscapes.InitSystemFont'.
                                     *)
                                    sysFontAddr  : ADDRESS;
                                    
                                    (*  ASCII-Wert des letzten und ersten
                                     *  Zeichens im Systemzeichensatz und
                                     *  Breite der Fontdaten in Bytes.
                                     *)
                                    maxADE       : CARDINAL16;
                                    minADE       : CARDINAL16;
                                    fontWidth    : CARDINAL16;
                                    
                                    (*  Bildschirmbreite in Pixel
                                     *)
                                    screenWidth  : CARDINAL16;
                                    
                                    (*  Zeiger auf die Offset-Tabelle des
                                     *  Systemzeichensatzes.
                                     *)
                                    fontOffset   : ADDRESS;
                                    
                                    (*  Aktueller Cursorzustand:
                                     *
                                     *    b0 -- Cursorblinken ein/aus
                                     *    b1 -- momentaner Cursorzustand
                                     *          (normal/invertiert)
                                     *    b2 -- Cursor unsichtbar/sichtbar
                                     *    b3 -- Wrapping ein/aus
                                     *    b4 -- Inverse Darstellung ein/aus
                                     *    b5 -- Cursorposition gespeichert
                                     *)
                                    cursStatus   : WordBitSet;
                                    
                                    (*  Bildschirmhoehe in Pixel
                                     *)
                                    screenHeight : CARDINAL16;
                                    
                                    (*  Breite einer Bildschirmzeile in Byte
                                     *)
                                    bytesPerLine : CARDINAL16;
                                    
                                  END;
        PtrNegLineAVars         = POINTER TO NegLineAVars;
        
 
PROCEDURE SystemFonts (): PtrSysFontHeader;
        
        (*  Durch diese Funktion erhaehlt man einen Zeiger auf ein Feld,
         *  in dem die Startaddressen der drei System-Font-Header gespei-
         *  chert sind.
         *)


PROCEDURE LineAVariables (): PtrLineAVars;
        
        (*  Liefert einen Zeiger auf die Line-A-Variablen.
         *)

PROCEDURE NegLineAVariables (): PtrNegLineAVars;
        
        (*  Liefert einen Zeiger auf die 'VDI-Escape-Variablen' (negative
         *  Line-A-Variablen).
         *
         *  Die Benutzung dieser Variablen ist nicht uneingeschraenkt zu
         *  empfehlen, da ihre Lage von Atari nicht offiziell dokumen-
         *  tiert ist. Da sie aber bei allen bisherigen TOS-Versionen
         *  ihre Lage relativ zu den Line-A-Variablen nicht veraendert
         *  haben, ist ihre Benutzung relativ sicher.
         *)


PROCEDURE PutPixel (p: Point; color: CARDINAL);

        (*  Diese Routine weisst dem Punkt 'p' des logischen Bildschirms
         *  die Farbe 'color' zu. Dabei wird weder das Clipping noch ei-
         *  ne andere der Line-A-Variablen beruecksichtigt.
         *)
        
PROCEDURE PixelColor (p: Point): CARDINAL;

        (*  Ermittelt den Farbwert des Punktes 'p'.
         *)

PROCEDURE Line (p, q: Point);

        (*  'Line' zieht eine Linie zwischen den beiden Punkten 'p' und
         *  'q', dabei wird die Farbe durch die Line-A-Variablen 'plane1'
         *  bis 'plane4' bestimmt, ausserdem wird 'writingMode', 'lineMask'
         *  und 'lastLine' beruecksichtigt.
         *)

PROCEDURE HorizontalLine (x1, x2, y: INTEGER);

        (*  Zieht eine horizontale Line von 'x1' bis 'x2' auf der Hoehe von
         *  'y', die Farbe wird wieder durch 'plane1' bis 'plane4' bestimmt
         *  und es werden noch 'writingMode', 'patternPtr', 'patternMask'
         *  und 'multiFill' beruecksichtigt.
         *)

PROCEDURE FilledRectangle (p, q: Point);

        (*  Diese Procedur zeichnet ein gefuelltes Rechteck, dessen Ausmasse
         *  durch 'p' und 'q' bestimmt werden, dabei ist 'p' der linke,
         *  obere und 'q' der rechte, untere Eckpunkt. Die Parameter wer-
         *  den durch die gleichen Line-A-Variablen, wie bei 'Horizontal-
         *  Line' festgelegt, nur werden zusaetzlich noch die Clippingvar-
         *  iablen benutzt.
         *)

PROCEDURE FilledPolygon (REF pts: ARRAY OF Point; noPts: CARDINAL; y: INTEGER);

        (*  Mit dieser Funktion kann man gefuellte Polygone zeichnen, aller-
         *  dings wird bei einem einzelnen Aufruf noch nicht das gesamte
         *  Polygon, sondern nur eine einzelne Zeile daraus gezeichnet.
         *  Welche Zeile gezeichnet wird, gibt 'y' an. Um das vollstaendige
         *  Vieleck zu erhalten, muss man also die oberste und unterste Bild-
         *  schirmzeile ermitteln, in der das Polygon liegt; danach ruft
         *  man 'FilledPolygon' fuer alle Zeilen, die zwischen der obersten
         *  und untersten liegen auf. Das Feld 'pts' enthaelt alle Eckpunkte
         *  des Vielecks, wobei der erste Punkt (pts[0]) noch einmal als
         *  letzter auftretten muss. Wieviel effektive Eckpunkt das Polygon
         *  besitzt, wird in 'noPts' angegeben. Ist 'noPts = 0', so wird das
         *  gesamte Feld benutzt.
         *  Die beruecksichtigten Line-A-Variablen entsprechen denen von
         *  'FilledRectangle'.
         *)


TYPE    BBTDeskriptor   = RECORD
                            w            : CARDINAL16;
                            h            : CARDINAL16;
                            destPlanes   : CARDINAL16;
                            setBitCol    : CARDINAL16;
                            unsetBitCol  : CARDINAL16;
                            mode00       : BYTE;
                            mode01       : BYTE;
                            mode10       : BYTE;
                            mode11       : BYTE;
                            sourceStart  : Point;
                            sourceAddr   : ADDRESS;
                            sourceInc    : CARDINAL16;
                            sourceWidth  : CARDINAL16;
                            sourceWidth2 : CARDINAL16;
                            destStart    : Point;
                            destAddr     : ADDRESS;
                            destInc      : CARDINAL16;
                            destWidth    : CARDINAL16;
                            destWidth2   : CARDINAL16;
                            patternPtr   : PtrByteArray;
                            patternWidth : CARDINAL16;
                            patPlaneOff  : CARDINAL16;
                            patternEnd   : CARDINAL16;
                            scratch      : ARRAY[0..11] OF INTEGER16;
                          END;
        PtrBBTDeskriptor= POINTER TO BBTDeskriptor;

PROCEDURE BitBlockTransfer (deskriptor: PtrBBTDeskriptor);

        (*  Diese Routine kopiert Speicherbereiche, insbesondere Bild-
         *  schirmausschnitte, wobei allerdings auch noch ein Fuell-
         *  muster als Maske verwendet werden kann. Falls ein Blitter
         *  vorhanden und dieser auch aktiviert ist, so wird die ei-
         *  gentliche Kopierarbeit an ihn uebertragen, ist der Chip
         *  nicht im Rechner eingebaut oder abgeschalten, so wird die
         *  Aufgabe von einer Art Software-Blitter uebernommen, wodurch
         *  alles etwas langsamer, aber im Prinzip gleichartig ablaeuft.
         *  Das Record, auf das 'deskriptor' zeigt, beschreibt den Ko-
         *  pierauftrag vollstaendig, es werden also keine Line-A-Var-
         *  iablen benutzt.
         *)

PROCEDURE TextBlockTransfer (font: PtrFontHeader; ch: CHAR; spot: Point);
        
        (*  Gibt das Zeichen 'ch' des Fonts 'font' ab dem Bildschirmpunkt
         *  'spot' aus, dabei werden nur die Daten, die speziell dieses
         *  Zeichen, den Font und den angegebenen Punkt betreffen in die
         *  Line-A Variablen eingetragen, dass setzen von Effekten etc.
         *  muss vorher durgefuehrt werden.
         *  Die Variable 'writingMode' und die Clippingvariablen haben
         *  die gleiche Wirkung wie immer, ausserdem werden an speziellen
         *  Textausgabevariablen noch 'scaleAcc', 'scaleFactor', 'scale-
         *  Mode', 'style', 'scaling', 'chup', 'textFg' und 'textBg' aus-
         *  gewertet. Falls man Texteffecte und/oder Scaling benutzt, muss
         *  man 'scratchArea' und 'scratchOff2' noch mit den richtigen
         *  Werten belegen.
         *)
         

PROCEDURE ShowMouse (force: BOOLEAN);

        (*  Macht den Mauscursor sichtbar. Falls 'force = TRUE' ist, wird
         *  der Cursor auf alle Faelle sichbar, sonst wird er erst sicht-
         *  bar, wenn genauso viele 'ShowMouse' wie vorher 'HideMouse'
         *  durchgefuehrt worden sind.
         *)

PROCEDURE HideMouse;

        (*  Versteckt den Mauscursor. Es wird mitgezaehlt, wie oft die
         *  Procedur aufgerufen wurde (siehe auch 'ShowMouse').
         *)

PROCEDURE TransformMouse (newForm: PtrMouseFormDef);

        (*  Mit dieser Routine kann man dem Mauscursor ein neues Aussehen
         *  verleihen, dabei ist 'newForm' ein Zeiger auf den Parameter-
         *  block, der das neue Aussehen des Cursors bestimmt.
         *)
                         
                         
TYPE    SpriteFormat    = (vdiFormat, xorFormat);
        SpriteDefBlock  = RECORD
                            offset       : Point;
                            format       : SpriteFormat;
                            backColor    : CARDINAL16;
                            foreColor    : CARDINAL16;
                            pattern      : ARRAY[0..31] OF CARDINAL16;
                          END;
        PtrSpriteDef    = POINTER TO SpriteDefBlock;
        
        (*  Es bedeuten:
         *
         *  'offset'    -- Distanz zwischen dem angegebenen Hot-Spot (Siehe
         *                 'DrawSprite') und dem Pixel, an dem die linke,
         *                 obere Ecke des Sprites erscheint.
         *  'format'    -- Gibt an auf welche Art der Sprite mit dem alten
         *                 Bildschirminhalt verknuepft werden soll.
         *                 Es steht 'Vg' fuer die Bits des Vordergrundmusters
         *                 und 'Hg' fuer die des Hintergrundmusters. Das Er-
         *                 gebnis gibt an, welche Farbe sichtbar wird, dabei
         *                 steht 'orginal' fuer die Farbe des Pixels bevor
         *                 'DrawSprite' aufgerufen wurde. 'xor' stellt die
         *                 logische Exclusiv-Oder Verknuepfung dar.
         *
         *                                 Vg    Hg       Ergebnis
         *
         *                 'vdiFormat':    0     0        orginal
         *                                 0     1        'backColor'
         *                                 1     0        'foreColor'
         *                                 1     1        'foreColor'
         *
         *                 'xorFormat':    0     0        orginal
         *                                 0     1        'backColor'
         *                                 1     0    orginal xor 'foreColor'
         *                                 1     1        'foreColor'
         *
         *  'backColor' -- Hintergrundfarbe
         *  'foreColor' -- Vordergrundfarbe
         *  'pattern'   -- Abwechselnd die Worte fuer das Hinter- und das
         *                 Vordergrundmuster. Zuerst die oberste Zeile des
         *                 Hintergrundes, darauf die oberste Zeile des Vor-
         *                 dergrundes, dann die zweite Zeile des Hinter-
         *                 grundes und weiter mit der zweiten Zeile des Vor-
         *                 dergrundes usw.
         *)
        
        PtrSpriteBuffer = RECORD
                            CASE (* planes *) :CARDINAL OF
                              1 :  onePlane  : POINTER TO ARRAY[0..73] OF BYTE|
                              2 :  twoPlanes : POINTER TO ARRAY[0..137] OF BYTE|
                              4 :  fourPlanes: POINTER TO ARRAY[0..265] OF BYTE|
                            ELSE
                            END;
                          END;
                          
        (*  Dabei gilt, 'onePlane'   fuer monochrome Darstellung
         *              'twoPlanes'  fuer 4 farbige Darstellung
         *              'fourPlanes' fuer 16 farbige Darstellung
         *)
                         
PROCEDURE UndrawSprite (buffer: PtrSpriteBuffer);

        (*  Loescht einen Sprite wieder vom Bildschirm, wobei der Hinter-
         *  grund restauriert wird. 'buffer' ist der Speicherbereich, in
         *  den der Hintergrund beim Zeichnen des Sprites gerettet wurde
         *)

PROCEDURE DrawSprite (hotSpot: Point;
                      sprite : PtrSpriteDef;
                      buffer : PtrSpriteBuffer);
        
        (*  Diese Procedur zeichnet den Sprite, der durch 'sprite' beschrieben
         *  wird, ab dem Punkt 'hotSpot' auf den Bildschirm. Dabei wird der
         *  ehemalige Inhalt des Bildschirmspeichers (Hintergrund) in den Spei-
         *  cherbereich gerettet, auf den 'buffer' zeigt.
         *)
         

TYPE    RasterMode      = RECORD
                            CASE :BOOLEAN OF
                              FALSE :  opaque : BitOperation|
                              TRUE  :  trans  : WritingMode|
                            END
                          END;

PROCEDURE CopyRasterForm (sourceMem,
                          destMem    : PtrMemFormDef;
                          sourceStart,
                          sourceEnd,
                          destStart,
                          destEnd    : Point;
                          mode       : RasterMode;
                          setCol,
                          unsetCol   : CARDINAL);
                         
        (*  Diese Routine kopiert einen rechteckigen Bildschirmausschnitt,
         *  dabei ist es nicht noetig, dass der Bildspeicher genau die Groesse
         *  eines physikalischen Bildspeichers besitzt (32000 Byte). Viel-
         *  mehr wird die Form des Bildspeichers durch eine Variable vom
         *  Typ 'MemFormDef' bestimmt. 'sourceMem' beschreibt den Quell-
         *  bereich, 'sourceStart' gibt die linke, obere und 'sourceEnd'
         *  die rechte, untere Ecke des Quellrechtecks an. Entsprechend
         *  beschreiben 'destMem', 'destStart' und 'destEnd' den Ziel-
         *  bereich. 'mode' bestimmt die Verknuepfungsart, der Inhalte des
         *  Ziel- und des Quellbereichs. 'setCol' und 'unsetCol' bestimmen
         *  beim 'CopyTransparent'-Modus die Farben im Zielbereich.
         *  Diese Procedur benuetzt die 'BitBlockTransfer'-Routine.
         *
         *  Man muss zwei Arten des Kopievorgangs unterscheiden. Es ist
         *  'LineAVars.copyTrans':
         *
         *  'FALSE' -- Es muss 'mode.opaque' gesetzt werden.
         *             'setCol' und 'unsetCol' sind wirkungslos 'source
         *             Mem.planes' muss gleich 'destMem.planes' sein.
         *             Entspricht 'VDIRasters.CopyOpaque'.
         *  'TRUE'  -- Es muss 'mode.trans' benutzt werden.
         *             'setCol' legt die Farbe der in 'sourceMem' auf 1
         *             gesetzten Bits fest, 'unsetCol' die der auf 0 ge-
         *             setzten Bits. Dabei muss 'sourceMem.planes=1' sein.
         *             Entspricht 'VDIRasters.CopyTrans'.
         *)
         
PROCEDURE ContourFill (p: Point; color: CARDINAL; useColor: BOOLEAN);

        (*  Diese Routine fuellt einen Bildschirmbereich von dem Punkt 'p'
         *  ausgehend. Ist 'useColor = TRUE', so wird der Bereich durch
         *  die Farbe 'color' abgegrenzt, sonst durch jede Farbe, ausser
         *  der, die dem Punkt 'p' vor dem Funktionsaufruf zugeordnet ist.
         *  Diese Routine benutzt unter anderem die Variable 'seedAbort'.
         *
         *  ACHTUNG: Die Routine ist offiziell nicht dokumentiert. Ihre
         *           Funktionsweise kann sich also bei einer zukuenftigen
         *           TOS-Version aendern!
         *)

END LineA.
