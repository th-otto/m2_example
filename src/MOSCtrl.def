DEFINITION MODULE MOSCtrl;

(*
 * Internes Modul!
 *)

FROM SYSTEM IMPORT ADDRESS;
FROM GEMDOS IMPORT PtrBP;
FROM MOSGlobals IMPORT MemArea;
FROM PrgCtrl IMPORT PState;

TYPE
     EnvlpProc = PROCEDURE (    (* opening: *) BOOLEAN,
                                (* inChild: *) BOOLEAN,
                            VAR (* exitCode:*) INTEGER );

(*
 * Zeigt auf die TOS-Variable, die den aktuellen Prozess bezeichnet.
 *)
VAR ProcessID: POINTER TO PtrBP;

(*
 * Globales Modullevel.
 * Ist Eins fuer unterstes Level;
 * Null, wenn eigener Prozess nicht mehr aktiv (z.B. bei residenten Prg.).
 *)
VAR ModLevel: CARDINAL;

(*
 * TRUE, wenn Basismodule resident sind.
 * Bleibt auch erhalten, wenn Basisprozess beendet wird und Prg
 * resident bleibt.
 *)
VAR BaseResident: BOOLEAN;

(*
 * Zeigt an, ob BaseProcess ein ACC ist
 *)
VAR BaseIsAccessory: BOOLEAN;

(*
 * Erst gueltig, wenn processState = 3 (term)
 *)
VAR ExitCode: INTEGER;

(*
 * Vom Linker uebergeben: 0 = keine Reals, 1 = Soft, 2 = ST-FPU, 3 = TT-FPU
 *)
VAR RealMode: CARDINAL;

(*
 * 0: none, 1: external, 2: internal
 *)
VAR UsedFPU: CARDINAL;

TYPE TermList  = POINTER TO TermEntry;
     TermProc = PROCEDURE;
     TermEntry = RECORD
                   call: TermProc;
                   wsp : MemArea;
                   next: TermList
                 END;

     EnvList  = POINTER TO EnvEntry;
     EnvEntry = RECORD
                  call: EnvlpProc; (* PROCEDURE(start,child):BOOLEAN) *)
                  wsp: MemArea;
                  level: INTEGER;
                  next: EnvList
                END;

     RemovalList  = POINTER TO RemovalEntry;
     RemovalProc = PROCEDURE;
     RemovalEntry = RECORD
                      next: RemovalList;
                      prev: RemovalList;
                      call: RemovalProc;
                      wsp: MemArea;
                    END;



TYPE PtrPDB = POINTER TO PDB;
     PDB = RECORD
             layout       : CARDINAL;
             basePageAddr : PtrBP;
             modLst       : POINTER TO ARRAY [1..65535] OF RECORD
                              head0: ADDRESS;
                              var0: ADDRESS;
                              varlen0: LONGCARD;
                              flags: BITSET;
                            END;
             modNo        : CARDINAL;
             processState : PState;
             bottomOfStack: ADDRESS;
             topOfStack   : ADDRESS;
             termState    : PState;
             resident     : BOOLEAN;
             flags        : CARDINAL; (* vom Linker: 0,1: RealFormat; 2: 68020-Code *)
             termProcs    : TermList;
             prev         : PtrPDB;
             initialSSP   : ADDRESS;
             prevTermHdlr : ADDRESS;
           END;

(*
 * Meldet eine Prozedur an, die aufgerufen wird, wenn das Modul,
 * das die Prozedur enthaelt, nicht mehr benoetigt wird und aus dem
 * Speicher entfernt werden kann.
 *
 * 'wsp' ist der Stack, der 'info' beim Aufruf zugeteilt wird. 'wsp.bottom'
 * darf NIL sein, dann wird der normale Programm-Stack verwendet.
 *
 * Diese Funktion (und nicht etwa 'CatchProcessTerm') ist deshalb
 * das exakte Gegenstueck zum Aufruf des Modulkoerpers.
 *
 * Dies ist der Fall, wenn
 *  a) das Modul in einem Programm eingelinkt ist und das Programm
 *     normal beendet;
 *  b) das Modul durch einen Import vom Loader (also durch Load-Time
 *     Link) dazugeladen und gestartet wurde und nun wieder freigegeben
 *     werden kann, da der Prozess wieder endet;
 *  c) das Modul von einem Modul importiert wird, das sich mit
 *     'ModCtrl.InstallModule' resident gemacht hatte und nach
 *     einem Aufruf von 'ReleaseModule', wie unter b), entfert wird.
 *
 * Wird ein Modul lediglich vom Loader (mittels 'LoadModule') geladen,
 * aber nicht aufgerufen, zaehlt das entsprechende Ausladen des Moduls
 * nicht zu den obigen Faellen. Vielmehr wird bei geladenen Modulen
 * so verfahren, als wenn das Modul jedesmal neu geladen und wieder
 * entladen wird.
 *
 * Somit ist diese Funktion dann zu verwenden, wenn ein Modul Ressourcen
 * dynamisch bei seiner Initialisierung oeffnet, die genau dann wieder
 * geschlossen werden duerfen, wenn das Modul nicht mehr benoetigt wird.
 * Normalerweise koennte man das dann mit 'PrgCtrl.CatchProcessTerm'
 * bewerkstelligen. Nur ist es dann nicht moeglich, das Modul in Pro-
 * grammen zu verwenden, die sich mit 'InstallModule' resident machen.
 *
 * Wird also z.B. in einem Modul im Koerper Speicher angefordert, sollte
 * dieser mit der Sys-Funktion (SysAlloc) angefordert werden und ueber
 * 'CatchRemoval' der Speicher wieder freigegeben werden.
 *
 * WICHTIG: Das benutzende Modul muss mit der Directive "$Y+" uebersetzt
 *          werden!
 *)
PROCEDURE CatchRemoval ( VAR hdl: RemovalEntry; info: RemovalProc; wsp: MemArea );

(*
 * Liefert NIL in pdb, wenn gerade kein MOS-Prozess aktiv und ModLevel > 0.
 * Wenn ein Prg also resident ist, bekommt es, wenn ModLevel = 0, zumindest
 * seinen PDB, dessen Daten teilweise noch gueltig sind (Stack-Ptr, resident,
 * modLst, usw). Wenn Prg ein ACC ist und ModLevel=1, wird PDB geliefert.
 * 'process' enthaelt immer akt. laufenden TOS-Prozess (akt.Basepage)
 *)
PROCEDURE GetPDB ( VAR pdb: PtrPDB; VAR process: ADDRESS );

(*
 * Es muss die Adresse eines bereits angelegten
 * und initialisierten PDB uebergeben werden.
 *)
PROCEDURE PushPDB ( pdb: PtrPDB; process: PtrBP );

PROCEDURE PopPDB;

(*
 * Muss unbedingt immer aufgerufen werden, weil hierin nicht nur
 * der Prozess-Status gesetzt, sondern auch abhaengig davon andere
 * Operationen durchgefuehrt werden! Also keinesfalls PDB.processState
 * direkt setzen!
 *)
PROCEDURE SetProcessState ( state: PState );

PROCEDURE CallSub ( subRoutine: PROC; VAR wsp: MemArea );

(*
 * Entfernt u.A. den Termination-Handler
 *)
PROCEDURE CallRemoveProcs;

(*
 * Ersatz fuer GEMDOS-Pterm(). Fuehrt Abmeldefunktionen vorher aus.
 *)
PROCEDURE Pterm (exitCod: INTEGER);

(*
 * Folg. zwei Vars bezeichnen letzten aktiven MOS-Prozess
 *)
VAR ActPDB : PtrPDB;            (* Bleibt nach unterstem Prozessende erhalten *)
VAR ActMOSProcess: PtrBP;       (* Ist NIL unter unterstem Prozesslevel *)

VAR BaseProcess: PtrBP;         (* Bei ACCs hier Base Page des ACC *)

END MOSCtrl.
