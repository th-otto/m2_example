DEFINITION MODULE AESForms;
#define REF

(*  Megamax Modula-2 GEM-Library :  Die AES Formularfunktionen
 *
 *  Autor: Manuel Chakravarty           Erstellt :  05.11.87
 *
 *  Version   2.2     V#0015
 *)


(*      Dieses Modul unterstuetzt die Benutzung von Formularen (Dialogboxen).
 *
 *      Die Prozeduren 'FormError' und 'FormAlert' fuehren dabei einen kom-
 *      pletten Dialog und bauen die benoetigte Objektbaumstruktur selbst-
 *      staendig auf.
 *      Die restlichen Routinen uebernehmen jeweils Teilaufgaben beim Fuehren
 *      eines Dialogs mit einer vom Benutzer frei definierbaren Dialogbox,
 *      deren Definition in Form eines Objektbaumes (siehe 'GEMGlobals')
 *      vorhanden sein muss.
 *)


FROM GrafBase   IMPORT Rectangle;

FROM GEMGlobals IMPORT GemChar, PtrObjTree;


(*  Form Manager  *)
(*  ============  *)

(*  Zentriert Dialogbox und liefert den belegten Bildschirmbereich.
 *
 *  Dabei ist 'tree' der Objektbaum, der die Box beschreibt und es
 *  werden die Ausmasse und die neue Position der Dialogbox als Funk-
 *  tionswert geliefert.
 *)
PROCEDURE FormCenter(tree: PtrObjTree): Rectangle;


TYPE    FormDialMode    = (reserveForm, growForm, shrinkForm, freeForm);

(*  Bereitet einen Dialog vor und beendet ihn auch wieder.
 *
 *  Eingabeparameter:
 *  -----------------
 *
 *  'flag'      -- Bestimmt die Funktion der Routine (siehe unten).
 *  'big'       -- Groesse und Position der Dialogbox (z.B. von
 *                 'FormCenter').
 *  'little'    -- Bildschirmbereich in dem das Objekt (Menuepunkt,
 *                 Icon, etc.) liegt, das den Dialog ausgeloesst hat.
 *                 Wird nur bei 'growForm' und 'shrinkForm' gebrau-
 *                 cht.
 *
 *  Funktionen:
 *  -----------
 *
 *  'reserveForm' -- Reserviert den von der Dialogbox belegten Bild-
 *                   schirmbereich.
 *  'growForm'    -- Zeichnet ein sich ausdehnendes Rechteck.
 *  'shrinkForm'  -- Zeichnet ein schrumpfendes Rechteck.
 *  'freeForm'    -- Gibt den von der Dialogbox belegten Bildschirm-
 *                   bereich wieder frei, dabei wird das Neuzeichnen
 *                   des Bereichs veranlasst.
 *
 *  Die zweite und dritte Funktion ist optional, dass heisst sie sind
 *  beide schoen anzusehen, fuer das korrekt Funktionieren des Dialogs
 *  sind sie aber nicht notwendig.
 *
 *  Der vierte Modus ist gut geeignet das Neuzeichnen, bestimmter
 *  Bildschirmausschnitte, zu erzwingen.
 *)
PROCEDURE FormDial(flag: FormDialMode; little, big: Rectangle);
PROCEDURE FormDialogue(flag: INTEGER; littlex, littley, littlew, littleh: INTEGER; bigx, bigy, bigw, bigh: INTEGER);

(*  Fuehrt einen Teildialog durch, dass heisst alle vom Benutzer inner-
 *  halb der Dialogbox durchgefuehrten Aktionen werden selbstaendig
 *  ausgewehrtet. Erst beim Selektieren eines Objektes mit gesetztem
 *  'selectExitFlg'-Flag oder Anklicken eines Objektes mit gesetztem
 *  'touchExitFlag' kehrt die Routine zurueck.
 *
 *  Eingabeparameter:
 *  -----------------
 *
 *  'tree'      -- Objektbaum, der die Dialogbox beschreibt.
 *  'first'     -- Objektindex, der edierbaren Zeichenkette, auf
 *                 der der Cursor zuerst plaziert werden soll.
 *                 'Root' sollte uebergeben werden, falls kein sol-
 *                 ches Feld existiert, oder das erste im Baum be-
 *                 nutzt werden soll.
 *
 *  Ausgabeparameter:
 *  -----------------
 *
 *  'retBut'    -- Index des Objektes, dessen Selektieren oder An-
 *                 klicken den Teildialog abgebrochen hat.
 *
 *    WICHTIG: Wird die Dialogbox mit einem Doppelklick verlassen,
 *             so ist das hoechstwertige Bit von 'retBut' gesetzt,
 *             d.h., der Wert ist um 32768 groesser und muss unbedingt
 *             abgezogen werden, wenn der Wert als Index im Baum
 *             weiterbenutzt oder verglichen werden soll!
 *
 *  Voraussetzung fuer das korrekte Funktionieren, dieser Prozedur,
 *  ist, dass sich die von 'tree' beschriebene Dialogbox schon auf
 *  dem Bildschirm befindet.
 *)
PROCEDURE FormDo(tree: PtrObjTree; first: CARDINAL; VAR retBut: CARDINAL);


(*  Fuehrt einen vollstaendigen Dialog mit dem Benutzer. Der Dialog
 *  ist auf einen maximal 5 zeiligen Text und die Angabe von bis
 *  zu 3 Knoepfen begrenzt.
 *
 *  Es bestimmt 'defBut' den Standardknopf, d.h. den Knopf, der
 *  selektiert wird, sobald der Benutzer die <Return>-Taste drueckt.
 *  Ausserdem bestimmt 'str' den Inhalt der Dialogbox und 'retBut'
 *  liefert den Knopf, dessen Selektion den Dialog beendet hat.
 *
 *  Diese Art von Formularen wird meist fuer Fehler- oder Warnmel-
 *  dungen benutzt, ihr Inhalt wird wie folgt festgelegt.
 *
 *  Aufbau von 'str':
 *  -----------------
 *
 *  Syntax:    '[' <Icon> '][' <Text> '][' <Knoepfe> ']'
 *
 *  Dabei ist,
 *
 *    <Icon> eine Zahl zwischen 0 und 3
 *
 *              0 -- kein Icon (Piktogramm)
 *              1 -- NOTE-Icon
 *              2 -- WAIT-Icon
 *              3 -- STOP-Icon
 *
 *    <Text> ein String, der in maximal 5 Bloecke mit 29 Zeichen
 *    aufgeteilt ist. Die Trennung der einzelnen Bloecke, die von
 *    der Routine in verschiedenen Zeilen ausgegeben werden, fin-
 *    det durch '|' statt;
 *
 *    <Knoepfe> ist ebenfalls eine Zeichenkette, die durch '|' in
 *    diesmal hoechstens 3 Bloecke zu je 9 Zeichen geteilt wird.
 *    Jeder Block wird auf dem Bildschirm zu einem Knopf (button).
 *    Die Buttons werden von links nach rechts von 1 bis 3 durch-
 *    nummeriert.
 *
 *  Eine Besonderheit dieses Dialoges ist, dass der Bildschirmhinter-
 *  grund automatisch gerettet und am Dialogende wiederhergestellt
 *  wird.
 *
 *  Beispiel:
 *  ---------
 *
 *    FormAlert(1,'[3][ *** BUS ERROR *** | in Zeile 5!][ Pech ]',but)
 *
 *    Es wuerde das STOP-Icon erscheinen mit dem Text ' *** BUS
 *    ERROR *** ' in der ersten und ' in Zeile 5!' in zweiten
 *    Zeile. Der einzige Knopf waere gleichzeitig Standardknopf
 *    und besaesse den Text ' Pech '.
 *    'but' muss eine Variable vom Typ CARDINAL sein.
 *)
PROCEDURE FormAlert(defBut: CARDINAL; REF str: ARRAY OF CHAR; VAR retBut: CARDINAL);

(*  Gibt eine Systemfehlermeldung mit Hilfe einer Alertbox aus.
 *
 *  'errNo' kann die folg. Werte annehmen:
 *
 *    2, 3, 18: "Diese Anwendung kann Datei oder Ordner nicht finden"
 *    4: "Kein Platz mehr fuer weitere Fenster - Bitte eins schliessen"
 *    5: "Datei existiert bereits oder ist Schreibgeschuetzt"
 *    8, 10, 11: "Es steht nicht genug Speicher fuer diese Anwendung
 *                zur Verfuegung"
 *    15: "Dieses Laufwerk ist nicht vorhanden"
 *
 *  Diese Werte entsprechen uebrigens den Fehlernummern bei MS-DOS.
 *)
PROCEDURE FormError(errNo: INTEGER);

(*  Diese Prozedur verarbeitet die bei einer Dialogsitzung anfal-
 *  lenden Steuerzeichen.
 *  Es ist 'tree' ein Zeiger auf das Dialogformular und 'index', der
 *  Baumindex des zu edierenden Objekts (= 0, falls keines vorhanden).
 *  'nextObj' ist der Index des naechsten Objekts und 'ch' enthaelt die
 *  betaetigte Taste. Falls 'ch' ein Steuerzeichen enthaelt, so wird
 *  dies bearbeitet und 'ch' der Wert 0C zugewiesen, sonst wird 'ch'
 *  nicht veraendert und kann mit 'AESObject.EditObjText' weiterver-
 *  arbeitet werden. 'nextObj' liefert das naechste Objekt.
 *  Ist 'cont = FALSE', so sollte der Teildialog abgebrochen werden,
 *  da zum Beispiel ein mit 'selectExitFlg' gekennzeichnetes Objekt
 *  angewaehlt wurde.
 *)
PROCEDURE FormKeyboard(tree: PtrObjTree; index: CARDINAL; VAR nextObj: CARDINAL; VAR ch: GemChar; VAR cont: BOOLEAN);

(*  Mit Hilfe dieser Routine koennen die Mausklicks einer Dialog-
 *  sitzung verarbeitet werden.
 *  'tree' ist der Formularbaum und 'index' enthaelt das angeklickte
 *  Objekt. In 'clicks' steht, wie oft der Mausknopf gedrueckt wurde
 *  und in 'nextObj' wird das naechste Objekt zurueckgegeben.
 *  Je nach Objekttyp von 'obj' fuehrt die Routine die entsprechenden
 *  Aktionen aus, wie zum Beispiel Objekt selektieren und Radioknoepfe
 *  veraendern.
 *  Ist 'cont = FALSE', so sollte der Teildialog abgebrochen werden,
 *  da zum Beispiel ein mit 'selectExitFlg' gekennzeichnetes Objekt
 *  angewaehlt wurde.
 *)
PROCEDURE FormButton(tree: PtrObjTree; index: CARDINAL; clicks: CARDINAL; VAR nextObj: CARDINAL; VAR cont: BOOLEAN);


END AESForms.
