DEFINITION MODULE GEMAESbase;

IMPORT SYSTEM;

CONST
  RTree = 0H(*LONGINT-CARD*);

CONST
  RObject = 1H(*LONGINT-CARD*);

CONST
  RTedInfo = 2H(*LONGINT-CARD*);

CONST
  RIconBlock = 3H(*LONGINT-CARD*);

CONST
  RBitBlock = 4H(*LONGINT-CARD*);

CONST
  RString = 5H(*LONGINT-CARD*);

CONST
  RImageData = 6H(*LONGINT-CARD*);

CONST
  RObSpec = 7H(*LONGINT-CARD*);

CONST
  RText = 8H(*LONGINT-CARD*);

CONST
  RTemplate = 9H(*LONGINT-CARD*);

CONST
  RValid = AH(*LONGINT-CARD*);

CONST
  RIconBlkMask = BH(*LONGINT-CARD*);

CONST
  RIconBlkData = CH(*LONGINT-CARD*);

CONST
  RIconBlkText = DH(*LONGINT-CARD*);

CONST
  RBitBlkData = EH(*LONGINT-CARD*);

CONST
  RFreeString = FH(*LONGINT-CARD*);

CONST
  RFreeImage = 10H(*LONGINT-CARD*);

CONST
  GraphicBox = 14H(*LONGINT-CARD*);

CONST
  GraphicText = 15H(*LONGINT-CARD*);

CONST
  GraphicBoxText = 16H(*LONGINT-CARD*);

CONST
  GraphicImage = 17H(*LONGINT-CARD*);

CONST
  GraphicProgDef = 18H(*LONGINT-CARD*);

CONST
  GraphicInvisibleBox = 19H(*LONGINT-CARD*);

CONST
  GraphicButton = 1AH(*LONGINT-CARD*);

CONST
  GraphicBoxChar = 1BH(*LONGINT-CARD*);

CONST
  GraphicString = 1CH(*LONGINT-CARD*);

CONST
  GraphicFormattedText = 1DH(*LONGINT-CARD*);

CONST
  GraphicFormattedBoxText = 1EH(*LONGINT-CARD*);

CONST
  GraphicIcon = 1FH(*LONGINT-CARD*);

CONST
  GraphicTitle = 20H(*LONGINT-CARD*);

CONST
  None = 0H(*LONGINT-CARD*);

CONST
  Selectable = 1H(*LONGINT-CARD*);

CONST
  Default = 2H(*LONGINT-CARD*);

CONST
  Exit = 4H(*LONGINT-CARD*);

CONST
  Editable = 8H(*LONGINT-CARD*);

CONST
  RadioButton = 10H(*LONGINT-CARD*);

CONST
  LastObject = 20H(*LONGINT-CARD*);

CONST
  TouchExit = 40H(*LONGINT-CARD*);

CONST
  HideTree = 80H(*LONGINT-CARD*);

CONST
  Indirect = 100H(*LONGINT-CARD*);

CONST
  Normal = 0H(*LONGINT-CARD*);

CONST
  Selected = 1H(*LONGINT-CARD*);

CONST
  Crossed = 2H(*LONGINT-CARD*);

CONST
  Checked = 4H(*LONGINT-CARD*);

CONST
  Disabled = 8H(*LONGINT-CARD*);

CONST
  Outlined = 10H(*LONGINT-CARD*);

CONST
  Shadowed = 20H(*LONGINT-CARD*);

CONST
  White = 0H(*LONGINT-CARD*);

CONST
  Black = 1H(*LONGINT-CARD*);

CONST
  Red = 2H(*LONGINT-CARD*);

CONST
  Green = 3H(*LONGINT-CARD*);

CONST
  Blue = 4H(*LONGINT-CARD*);

CONST
  Cyan = 5H(*LONGINT-CARD*);

CONST
  Yellow = 6H(*LONGINT-CARD*);

CONST
  Magenta = 7H(*LONGINT-CARD*);

CONST
  LightWhite = 8H(*LONGINT-CARD*);

CONST
  LightBlack = 9H(*LONGINT-CARD*);

CONST
  LightRed = AH(*LONGINT-CARD*);

CONST
  LightGreen = BH(*LONGINT-CARD*);

CONST
  LightBlue = CH(*LONGINT-CARD*);

CONST
  LightCyan = DH(*LONGINT-CARD*);

CONST
  LightYellow = EH(*LONGINT-CARD*);

CONST
  LightMagenta = FH(*LONGINT-CARD*);

CONST
  KeyboardEvent = 1H(*LONGINT-CARD*);

CONST
  ButtonEvent = 2H(*LONGINT-CARD*);

CONST
  Mouse1Event = 4H(*LONGINT-CARD*);

CONST
  Mouse2Event = 8H(*LONGINT-CARD*);

CONST
  MesageEvent = 10H(*LONGINT-CARD*);

CONST
  TimerEvent = 20H(*LONGINT-CARD*);

CONST
  KeyRightShift = 1H(*LONGINT-CARD*);

CONST
  KeyLeftShift = 2H(*LONGINT-CARD*);

CONST
  KeyCTRL = 4H(*LONGINT-CARD*);

CONST
  KeyALT = 8H(*LONGINT-CARD*);

CONST
  MenuSelected = AH(*LONGINT-CARD*);

CONST
  WindowRedraw = 14H(*LONGINT-CARD*);

CONST
  WindowTopped = 15H(*LONGINT-CARD*);

CONST
  WindowClosed = 16H(*LONGINT-CARD*);

CONST
  WindowFulled = 17H(*LONGINT-CARD*);

CONST
  WindowArrowed = 18H(*LONGINT-CARD*);

CONST
  WindowHorizSlided = 19H(*LONGINT-CARD*);

CONST
  WindowVertSlided = 1AH(*LONGINT-CARD*);

CONST
  WindowSized = 1BH(*LONGINT-CARD*);

CONST
  WindowMoved = 1CH(*LONGINT-CARD*);

CONST
  WindowNewTop = 1DH(*LONGINT-CARD*);

CONST
  AccessoryOpen = 28H(*LONGINT-CARD*);

CONST
  AccessoryClose = 29H(*LONGINT-CARD*);

CONST
  Arrow = 0H(*LONGINT-CARD*);

CONST
  TextCursor = 1H(*LONGINT-CARD*);

CONST
  HourGlass = 2H(*LONGINT-CARD*);

CONST
  PointHand = 3H(*LONGINT-CARD*);

CONST
  FlatHand = 4H(*LONGINT-CARD*);

CONST
  ThinCross = 5H(*LONGINT-CARD*);

CONST
  ThickCross = 6H(*LONGINT-CARD*);

CONST
  OutlineCross = 7H(*LONGINT-CARD*);

CONST
  UserDef = FFH(*LONGINT-CARD*);

CONST
  MouseOff = 100H(*LONGINT-CARD*);

CONST
  MouseOn = 101H(*LONGINT-CARD*);

CONST
  FormStart = 0H(*LONGINT-CARD*);

CONST
  FormGrow = 1H(*LONGINT-CARD*);

CONST
  FormShrink = 2H(*LONGINT-CARD*);

CONST
  FormFinish = 3H(*LONGINT-CARD*);

CONST
  Name = 1H(*LONGINT-CARD*);

CONST
  Closer = 2H(*LONGINT-CARD*);

CONST
  Fuller = 4H(*LONGINT-CARD*);

CONST
  Mover = 8H(*LONGINT-CARD*);

CONST
  InfoLine = 10H(*LONGINT-CARD*);

CONST
  Sizer = 20H(*LONGINT-CARD*);

CONST
  UpArrow = 40H(*LONGINT-CARD*);

CONST
  DownArrow = 80H(*LONGINT-CARD*);

CONST
  VertSlide = 100H(*LONGINT-CARD*);

CONST
  LeftArrow = 200H(*LONGINT-CARD*);

CONST
  RightArrow = 400H(*LONGINT-CARD*);

CONST
  HorizSlide = 800H(*LONGINT-CARD*);

CONST
  WCBorder = 0H(*LONGINT-CARD*);

CONST
  WCWork = 1H(*LONGINT-CARD*);

CONST
  WindowKind = 1H(*LONGINT-CARD*);

CONST
  WindowName = 2H(*LONGINT-CARD*);

CONST
  WindowInfo = 3H(*LONGINT-CARD*);

CONST
  WorkXYWH = 4H(*LONGINT-CARD*);

CONST
  CurrXYWH = 5H(*LONGINT-CARD*);

CONST
  PrevXYWH = 6H(*LONGINT-CARD*);

CONST
  FullXYWH = 7H(*LONGINT-CARD*);

CONST
  WindowHorizSlide = 8H(*LONGINT-CARD*);

CONST
  WindowVertSlide = 9H(*LONGINT-CARD*);

CONST
  Top = AH(*LONGINT-CARD*);

CONST
  FirstXYWH = BH(*LONGINT-CARD*);

CONST
  NextXYWH = CH(*LONGINT-CARD*);

CONST
  Reserved = DH(*LONGINT-CARD*);

CONST
  NewDesk = EH(*LONGINT-CARD*);

CONST
  HorizSliderSize = FH(*LONGINT-CARD*);

CONST
  VertSliderSize = 10H(*LONGINT-CARD*);

CONST
  WindowScreen = 11H(*LONGINT-CARD*);

CONST
  EndUpdate = 0H(*LONGINT-CARD*);

CONST
  BeginUpdate = 1H(*LONGINT-CARD*);

CONST
  EndMouseControl = 2H(*LONGINT-CARD*);

CONST
  BeginMouseControl = 3H(*LONGINT-CARD*);

TYPE
  Object = RECORD
             next(*offset: 0H*)  : INTEGER;
             head(*offset: 2H*)  : INTEGER;
             tail(*offset: 4H*)  : INTEGER;
             type(*offset: 6H*)  : INTEGER;
             flags(*offset: 8H*)  : INTEGER;
             state(*offset: AH*)  : INTEGER;
             spec(*offset: CH*)  : SYSTEM.ADDRESS;
             x(*offset: 10H*)  : INTEGER;
             y(*offset: 12H*)  : INTEGER;
             width(*offset: 14H*)  : INTEGER;
             height(*offset: 16H*)  : INTEGER;
           END;(*size: 18H*);
         
TYPE
  TEdInfo = RECORD
              ptext(*offset: 0H*)  : SYSTEM.ADDRESS;
              ptmplt(*offset: 4H*)  : SYSTEM.ADDRESS;
              pvalid(*offset: 8H*)  : SYSTEM.ADDRESS;
              font(*offset: CH*)  : INTEGER;
              resvd1(*offset: EH*)  : INTEGER;
              just(*offset: 10H*)  : INTEGER;
              colour(*offset: 12H*)  : INTEGER;
              resvd2(*offset: 14H*)  : INTEGER;
              thickness(*offset: 16H*)  : INTEGER;
              txtlen(*offset: 18H*)  : INTEGER;
              tmplen(*offset: 1AH*)  : INTEGER;
            END;(*size: 1CH*);
          
TYPE
  IconBlk = RECORD
              x(*offset: 12H*)  : INTEGER;
              y(*offset: 14H*)  : INTEGER;
              width(*offset: 16H*)  : INTEGER;
              height(*offset: 18H*)  : INTEGER;
              ptext(*offset: 8H*)  : SYSTEM.ADDRESS;
              pmask(*offset: 0H*)  : SYSTEM.ADDRESS;
              pdata(*offset: 4H*)  : SYSTEM.ADDRESS;
              iChar(*offset: CH*)  : INTEGER;
              xChar(*offset: EH*)  : INTEGER;
              yChar(*offset: 10H*)  : INTEGER;
              xText(*offset: 1AH*)  : INTEGER;
              yText(*offset: 1CH*)  : INTEGER;
              wText(*offset: 1EH*)  : INTEGER;
              hText(*offset: 20H*)  : INTEGER;
            END;(*size: 22H*);
          
TYPE
  BitBlk = RECORD
             x(*offset: 8H*)  : INTEGER;
             y(*offset: AH*)  : INTEGER;
             width(*offset: 4H*)  : INTEGER;
             height(*offset: 6H*)  : INTEGER;
             colour(*offset: CH*)  : INTEGER;
             pdata(*offset: 0H*)  : SYSTEM.ADDRESS;
           END;(*size: EH*);
         
TYPE
  ApplBlk = RECORD
              code(*offset: 0H*)  : SYSTEM.ADDRESS;
              param(*offset: 4H*)  : LONGINT;
            END;(*size: 8H*);
          
TYPE
  ParamBlk = RECORD
               x(*offset: AH*)  : INTEGER;
               y(*offset: CH*)  : INTEGER;
               param(*offset: 1AH*)  : LONGINT;
               pTree(*offset: 0H*)  : SYSTEM.ADDRESS;
               object(*offset: 4H*)  : INTEGER;
               preState(*offset: 6H*)  : INTEGER;
               curState(*offset: 8H*)  : INTEGER;
               w(*offset: EH*)  : INTEGER;
               h(*offset: 10H*)  : INTEGER;
               xc(*offset: 12H*)  : INTEGER;
               yc(*offset: 14H*)  : INTEGER;
               wc(*offset: 16H*)  : INTEGER;
               hc(*offset: 18H*)  : INTEGER;
             END;(*size: 1EH*);
           
TYPE
  AESGlobalType = RECORD
                    apVersion(*offset: 0H*)  : CARDINAL;
                    apCount(*offset: 2H*)  : CARDINAL;
                    apID(*offset: 4H*)  : CARDINAL;
                    apPrivate(*offset: 6H*)  : LONGCARD;
                    apPTree(*offset: AH*)  : SYSTEM.ADDRESS;
                    ap1Resv(*offset: EH*)  : LONGCARD;
                    ap2Resv(*offset: 12H*)  : LONGCARD;
                    ap3Resv(*offset: 16H*)  : LONGCARD;
                    ap4Resv(*offset: 1AH*)  : LONGCARD;
                  END;(*size: 1EH*);
                
TYPE
  AESControlType = RECORD
                     opcode(*offset: 0H*)  : CARDINAL;
                     sizeIntIn(*offset: 2H*)  : CARDINAL;
                     sizeIntOut(*offset: 4H*)  : CARDINAL;
                     sizeAddrIn(*offset: 6H*)  : CARDINAL;
                     sizeAddrOut(*offset: 8H*)  : CARDINAL;
                   END;(*size: AH*);
                 
TYPE
  AESIntInType = ARRAY [0H(*CARDINAL*)..10H(*CARDINAL*)] OF INTEGER;

TYPE
  AESIntOutType = ARRAY [0H(*CARDINAL*)..7H(*CARDINAL*)] OF INTEGER;

TYPE
  AESAddrInType = ARRAY [0H(*CARDINAL*)..2H(*CARDINAL*)] OF SYSTEM.ADDRE
SS;

TYPE
  AESAddrOutType = ARRAY [0H(*CARDINAL*)..1H(*CARDINAL*)] OF SYSTEM.ADDR
ESS;

TYPE
  177777B = POINTER TO AESControlType;

TYPE
  177776B = POINTER TO AESGlobalType;

TYPE
  177775B = POINTER TO AESIntInType;

TYPE
  177774B = POINTER TO AESIntOutType;

TYPE
  177773B = POINTER TO AESAddrInType;

TYPE
  177772B = POINTER TO AESAddrOutType;

TYPE
  AESParameterType = RECORD
                       control(*offset: 0H*)  : 177777B;
                       global(*offset: 4H*)  : 177776B;
                       intIn(*offset: 8H*)  : 177775B;
                       intOut(*offset: CH*)  : 177774B;
                       addrIn(*offset: 10H*)  : 177773B;
                       addrOut(*offset: 14H*)  : 177772B;
                     END;(*size: 18H*);
                   
VAR
  AESParameters (* reladdr: 0H*)  : AESParameterType;

VAR
  AESGlobal (* reladdr: 18H*)  : AESGlobalType;

VAR
  AESControl (* reladdr: 36H*)  : AESControlType;

VAR
  AESIntIn (* reladdr: 40H*)  : AESIntInType;

VAR
  AESIntOut (* reladdr: 62H*)  : AESIntOutType;

VAR
  AESAddrIn (* reladdr: 72H*)  : AESAddrInType;

VAR
  AESAddrOut (* reladdr: 7EH*)  : AESAddrOutType;

VAR
  AESCallResult (* reladdr: 86H*)  : INTEGER;

(* 1 *) PROCEDURE GemCall(opcode: INTEGER; nintin: INTEGER; nintout: INTEGER; naddrin: INTEGER; naddrout: INTEGER): INTEGER;

(* 2 *) PROCEDURE IntIn2(intin0, intin1: INTEGER);

(* 3 *) PROCEDURE IntIn3(intin0, intin1, intin2: INTEGER);

(* 4 *) PROCEDURE IntIn4(intin0, intin1, intin2, intin3: INTEGER);

(* 5 *) PROCEDURE IntIn8(intin0, intin1, intin2, intin3, intin4, intin5, intin6, intin7: INTEGER);

(* 6 *) PROCEDURE IntOut2(VAR intout0: INTEGER; VAR intout1: INTEGER);

(* 7 *) PROCEDURE IntOut4(VAR intout0: INTEGER; VAR intout1: INTEGER; VAR intout2: INTEGER; VAR intout3: INTEGER);

END GEMAESbase.
