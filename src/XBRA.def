DEFINITION MODULE XBRA;

(*
 * Universelle XBRA-Funktionen                        Version 1.2  vom 24.10.90
 *
 * Erstellt von Thomas Tempelmann.
 *
 * Die vorhandenen Funktionen bieten alles, um auf einfache Weise installierte
 * Vektoren zu erkunden (wahlweise alle oder einen spezifischen) und sie
 * korrekt ein-, bzw. wieder auszutragen.
 *
 * Wurde eine Funktion installiert, kann durch die Funktion 'PreviousEntry' die
 * vorher installierte Routine ermittelt werden. Damit ist es dann moeglich,
 * den Vorgaenger in der Funktion selbst aufzurufen, falls dies noetig waere.
 * Die zum Aufrufen notwendigen Funktionen sind jedoch nicht Bestandteil
 * dieser XBRA-Library, da sie erstens Compiler-spezifisch und zweitens
 * sie je nach Anwendung sehr unterschiedlich implementiert werden muessen.
 *
 * Die Funktionen sind so ausgelegt, dass sie normalerweise im User-Mode
 * aufgerufen werden und selbst beim Zugriff ueber die Vektoren in den Super-
 * visor-Mode wechseln (das Programm darf sich aber auch bereits im Supervi-
 * sor-Mode befinden). Dies erleichtert dem Programmierer die Anwendung der
 * Funktionen. Da die Anwendungen beim Installieren von Vektoren in der Regel
 * nicht zeitkritisch ausgelegt sein brauchen, sollte man diese Komfortabilitaet
 * dem leichten Zeitverlust durch - meist - zwei statt nur einem Wechsel vom
 * User- in den Supervisor-Mode vorziehen.
 *
 *
 * Hier noch eine allgemeine Beschreibung zur Anwendung der Funktionen:
 *
 * Folgendermassen sieht eine XBRA-Installation aus:
 *
 *   vector:= 400H; (* z.B. der 'etv_timer'-Vektor *)
 *   IF NOT Installed ('Test', vector) THEN
 *     Create (carrier, 'Test', ADDRESS (TestProzedur), entry);
 *     Install (carrier, vector)
 *   END;
 *
 * 'Installed' prueft, ob die Funktion schon mit XBRA-Kennung installiert
 * ist. Wenn nicht, wird mit 'Create' ein XBRA-Header erzeugt, der neben
 * der XBRA-Informationen auch eine Sprunganweisung enthaelt. Der so
 * erzeugte Header wird dann mit 'Install' als erster neuer Vektor
 * eingetragen und die XBRA-Verkettung erzeugt.
 *
 * Da je nach Implementation verschiedene Prozeduren mit beliebigen
 * Parametern verwendet werden koennten, und der XBRA-Header nur einfach
 * dazwischengesetzt wird, ist die Prozeduradresse 'call' als ADDRESS
 * deklariert. Fuer die korrekte Parameteruebergabe haben nicht die XBRA-
 * Funktionen zu sorgen, sondern schon die Routine, die zu installierende
 * Funktion ueber den Vektor aufruft.
 *
 * Zum Vergleich obige Installation ohne XBRA:
 *   vector:= 400H;  (* VAR vector: POINTER TO ADDRESS *)
 *   vector^:= ADDRESS (TestProzedur);
 * Falls es Probleme gibt, sollte erst das Programm ohne XBRA zum Laufen
 * gebracht werden, und dann erst die XBRA-Installation eingefuegt werden.
 * Z.B. ist zu beachten, dass normalerweise Installationen ueber externe
 * Vektoren ueber die Funktionen aus dem Modul 'Calls' vorgenommen werden
 * sollten. Dies bleibt auch so, wenn dann die XBRA-Funktionen zuhilfe
 * genommen werden!
 *
 * Soll die Funktion spaeter wieder aus der Vektor-Kette ausgehaengt werden,
 * geht das so:
 *
 *   IF Installed ('Test', vector) THEN
 *     Remove (carrier)
 *   END
 *
 * Bei 'PreviousEntry' (s.o.) wird der bei 'Create' erhaltene 'entry'-Wert
 * wieder uebergeben, um z.B. in 'TestProzedur' den Vorgaenger zu
 * ermitteln und dann ggf. aufzurufen.
 *
 * 'Query' dient dazu, alle installierten XBRA-Kennungen einer Vektor-
 * Kette zu ermitteln. Dabei koennen auch z.B. mit folgender Routine alle
 * installierten XBRA-Vektoren ausgehaengt werden:
 *
 *   PROCEDURE RemoveAll (vector: ADDRESS);
 *
 *     PROCEDURE step (at: ADDRESS; name: Str4): BOOLEAN;
 *       (* darf lokal sein *)
 *       BEGIN
 *         (*
 *          * Hier koennten der jeweilige Vorgaenger mit
 *          *  'PreviousEntry ( Entry (at) )'
 *          * oder die Adr. der aufgerufenen Prozedur mit
 *          *  'Called (at)'  ermittelt und angezeigt werden.
 *          *)
 *         IF prev # NIL THEN (* ist dies ein XBRA-Eintrag? *)
 *           Remove (at)      (* -> nur dann kann er entfernt werden *)
 *         END;
 *         RETURN TRUE        (* weitermachen, solange die Kette weitergeht *)
 *       END step;
 *
 *     BEGIN
 *       Query (vector, step)
 *     END RemoveAll;
 *
 *
 * Die Demo-Programme 'KbdTest' und 'ExcDemo' im UTILITY-Ordner zeigen
 * die Anwendung dieses Moduls.
 *)

FROM SYSTEM IMPORT ADDRESS, CARDINAL16, CARDINAL32;

TYPE

  ID = CARDINAL32;            (* String zur Aufnahme der Kennung *)

  JmpCarrier = RECORD                   (* Interne Datenstruktur!     *)
                 jmpInstr: CARDINAL16;   (*  - nicht darauf zugreifen! *)
                 call: PROC
               END;

TYPE Head = RECORD      (* Interne Datenstruktur - nicht darauf zugreifen! *)
              magic: ID;        (* CONST 'XBRA' *)
              name : ID;        (* individuelle Kennung *)
              prev : RECORD CASE :BOOLEAN OF
                     | FALSE: prev : ADDRESS; (* voriger Vektor *)
                     | TRUE: call : PROC;
                     END
              END;
END;

  Carrier = RECORD      (* Interne Datenstruktur - nicht darauf zugreifen! *)
              head: Head;                (* CONST 'XBRA' *)
              entry: JmpCarrier;
            END;

  QueryProc = PROCEDURE ( (* at  : *) ADDRESS,
                          (* name: *) ID      ): (* continue: *) BOOLEAN;


(*
 * Funktionen fuer die XBRA-Installation
 * ------------------------------------
 *)

(*
 * Erzeugt einen XBRA-Header mit einer Sprunganweisung zur Prozedur 'call'.
 * Achtung: die Carrier-Variable muss global (statisch) deklariert sein -
 *   sie muss so lange erhalten bleiben, wie die XBRA-Einbindung besteht!
 * Der erhaltene 'entry'-Wert kann daraufhin mittels der Prozedur 'Install'
 * in den gewuenschten Vektor eingetragen werden.
 *)
PROCEDURE Create (VAR carrier: Carrier; name: ID; call: PROC);

(*
 * Wird 'name' in Kette ab 'vector' gefunden, enthaelt 'at' die Adresse
 * des Vektors auf den Funktionseinsprung (welcher Teil von 'Carrier' ist).
 * Wird 'name' nicht gefunden, ist 'at'=vector
 *)
PROCEDURE Installed (name: ID; vector: ADDRESS): BOOLEAN;

(*
 * Fuegt einen XBRA-Header 'entry' im Vektor 'vector' ein. Der alte Vektorinhalt
 * wird im XBRA-Header gesichert und kann mittels 'PreviousEntry' abgefragt
 * werden.
 *)
PROCEDURE Install (VAR carrier: Carrier; vector: ADDRESS);

(*
 * Fuegt den XBRA-Header, auf den der Vektor bei 'at' zeigt, aus.
 * In den Vektor wird wieder der Vorgaenger eingetragen.
 *)
PROCEDURE Remove (VAR carrier: Carrier; vector: ADDRESS);

(*
 * Funktionen zum Abfragen XBRA-Informationen
 * ------------------------------------------
 *)

(*
 * Ruft 'with' fuer alle im Vektor 'vector' installierten Funktionen auf,
 * solange sie durch XBRA-Strukturen verbunden sind.
 * Die 'with'-Funktion kann 'FALSE' zurueckgeben, um die Aufrufe vorzeitig
 * zu beenden.
 * 'with' darf auch eine lokale Prozedur sein.
 *)
PROCEDURE Query (vector: ADDRESS; with: QueryProc);

(*
 * Liefert die Adresse, auf die der Vektor 'at' zeigt.
 * Dies ist der "Entry", vor dem ggf. die XBRA-Struktur steht.
 * Das Ergebnis dieser Funktion kann z.B. fuer die 'PreviousEntry'-Funktion
 * verwendet werden, sollte jedoch nicht zur rein informativen Ermittlung
 * der in 'at' installierten Funktion verwendet werden - dafuer ist 'Called'
 * (s.u.) vorgesehen!
 *)
PROCEDURE Entry (at: ADDRESS): ADDRESS;

(*
 * Liefert den "Entry", der vor dem angegebenen "Entry" installiert ist.
 * Diese Funktion kann z.B. in der eigenen installierten Funktion dazu
 * benutzt werden, den Vorgaenger aufzurufen (hier sollte aus Effizienz-
 * gruenden nicht 'Called' verwendet werden), um eine Aufrufkette zu reali-
 * sieren (ist z.B. beim 200Hz-Vektor sinnvoll, da hier mehrere Routinen
 * hintereinander installiert werden, die alle sich nacheinander aufrufen).
 * Zu diesem Zweck muss dann der bei 'Create' erhaltene 'entry'-Wert ueber-
 * geben werden. Achtung: Da damit gerechnet werden muss, dass waehrend der
 * Lebzeit des Programms im Speicher die XBRA-Verkettung jederzeit ver-
 * aendert werden kann, darf nicht einmalig fest die Vorgaengeradr. abgefragt
 * und dann ueber eine Programmlokale Variable adressiert werden, sondern
 * muss immer genau dann, wenn sie benoetigt wird, mit dieser Funktion ab-
 * gefragt werden. Es sind dabei keine nennenswerten Zeitverluste zu be-
 * fuerchten.
 * Wenn 'entry'=NIL, oder kein Vorgaenger ermittelt werden kann (keine XBRA-
 * Struktur vorhanden), wird NIL geliefert.
 *)
PROCEDURE PreviousEntry (entry: ADDRESS): ADDRESS;

(*
 * Liefert die korrekte Programmeinsprungstelle, die ueber den Vektor 'at'
 * erreicht wird. Dies waere normalerweise identisch mit dem Ergebnis der
 * 'Entry'-Funktion, jedoch wird hier erkannt, wenn diese "Entry"-Stelle
 * nur die von diesem Modul erzeugte Sprunganweisung in die eigentliche
 * Funktion ist, die bei der 'Install'-Funktion angegeben wurde. Dann
 * wird jene Funktionsadresse geliefert.
 *)
PROCEDURE Called (at: ADDRESS): ADDRESS;

END XBRA.
