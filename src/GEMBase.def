DEFINITION MODULE GEMBase;


(*  System              : Megamax Modula-2 (MOS 2.2)
 *  Autor & Copyright   : Manuel Chakravarty
 *  Vertrieb            : Application Systems Heidelberg
 *  Version             : 1.0 (V#0002)
 *
 *  Nach Anregungen von Michael Seyfried.
 *)

(*  Dieses Modul soll das Programmieren von VDI- und AES-Aufrufen gestatten,
 *  die die GEM-Library umgehen. Die Namen wurden soweit moeglich direkt von
 *  entsprechenden C-Bindings uebernommen und deshalb sollte es unter
 *  Zuhilfenahme entsprechender GEM-Literatur moeglich sein dieses Modul ohne
 *  grosse Erklaerungen, die diesen Rahmen sprengen wuerden zu benutzen.
 *
 *  Die Prozeduren dieses Moduls lassen sich in zwei Kategorien aufteilen:
 *  Abfrageroutinen und Aufrufroutinen. Erstere sind nur noetig, falls mit
 *  schon bestehenden Anmeldungen beim AES oder VDI weitergearbeitet werden
 *  soll (Anmeldungen, die urspruenglich von 'GEMEnv' durchgefuehrt wurden).
 *  Die Aufrufroutinen dienen zum Benutzen einer VDI- bzw. AES-Funktion.
 *  Es ist zu beachten, dass die automatischen Abmeldungen, wie z.B. das
 *  Schliessen aller noch offenen Fenster bei der Terminierung eines Prozesses
 *  bei Aufrufen, die mit diesem Modul durchgefuehrt werden in der Eigenver-
 *  antwortung des Programmierers bleiben und nicht mehr vom System kontrol-
 *  liert werden.
 *
 *  Benutzen einer bestehenden Anmeldung beim AES (APPL_INIT):
 *
 *    i)  Ermitteln des AES-Parameterblocks mit 'GetPBs'
 *    ii) Bei jedem Aufruf wird die Adresse auf den ermittelten Parameterblock
 *        an 'CallAES' uebergeben
 *
 *  Benutzen einer bestehenden Anmeldung beim VDI (OPEN [VIRTUAL] WORKSTATION)
 *
 *    i)   Ermitteln des VDI-Parameterblocks mit 'GetPBs'
 *    ii)  Ermitteln der Geraetekennung mit 'VDIHandle'.
 *    iii) Bei jedem Aufruf muss 'pb.contrl^.handle' die in ii) ermittelte
 *         Kennung zugewiesen werden und dann wird die Adresse auf den er-
 *         mittelten VDI-Parameterblock an 'CallVDI' uebergeben
 *
 *  Anwendungsbeispiele finden sich im DEMO-Ordner: AESDEMO.M und VDIDEMO.M!
 *
 *  ACHTUNG: Bei der Verwendung dieses Moduls koennen auf einfachste Weise
 *           die herlichsten Abstuerze erzeugt werden oder die GEM-Library
 *           in Verwirrung gebracht werden. Daher sollte es nur verwendet
 *           werden, sobald es unbedingt noetig ist und man ausreichend mit
 *           dem GEM vertraut ist.
 *)


FROM    SYSTEM  IMPORT  ADDRESS, CARDINAL16, INTEGER16, BITSET16;

FROM    GEMShare  IMPORT  GemHandle, DeviceHandle;

TYPE    IntinArray      = ARRAY[0..127] OF INTEGER16;
        IntoutArray     = ARRAY[0..127] OF INTEGER16;
        PtsinArray      = ARRAY[0..511] OF INTEGER16;
        PtsoutArray     = ARRAY[0..11]  OF INTEGER16;
        AddrinArray     = ARRAY[0..2]   OF ADDRESS;
        AddroutArray    = ARRAY[0..1]   OF ADDRESS;
        PtrIntinArray   = POINTER TO IntinArray;
        PtrIntoutArray  = POINTER TO IntoutArray;
        PtrPtsinArray   = POINTER TO PtsinArray;
        PtrPtsoutArray  = POINTER TO PtsoutArray;
        PtrAddrinArray  = POINTER TO AddrinArray;
        PtrAddroutArray = POINTER TO AddroutArray;

        (*  VDI-Typen *)

        CtrlPtr = RECORD CASE : CARDINAL OF
        | 0: proc: PROC;
        | 1: ptr: ADDRESS;
        | ELSE END
        END;

        VDIContrlArray  = RECORD
                            opcode      : CARDINAL16;
                            nptsin      : CARDINAL16;
                            nptsout     : CARDINAL16;
                            nintin      : CARDINAL16;
                            nintout     : CARDINAL16;
                            subcmd      : CARDINAL16;
                            handle      : INTEGER16;
                            ptr1        : CtrlPtr;
                            ptr2        : CtrlPtr;
                            multi5      : INTEGER16;
                          END;
        PtrVDIContrlArray= POINTER TO VDIContrlArray;

        (*  VDI-Parameterblock
         *)
        VDIPB           = RECORD
                            contrl      : PtrVDIContrlArray;
                            intin       : PtrIntinArray;
                            ptsin       : PtrPtsinArray;
                            intout      : PtrIntoutArray;
                            ptsout      : PtrPtsoutArray;
                          END;
        PtrVDIPB        = POINTER TO VDIPB;
        
        
        (*  AES-Typen  *)
        
        AESContrlArray  = RECORD
                            opcode      : CARDINAL16;
                            nintin      : CARDINAL16;
                            nintout     : CARDINAL16;
                            naddrin     : CARDINAL16;
                            naddrout    : CARDINAL16;
                          END;
        PtrAESContrlArray= POINTER TO AESContrlArray;

        GlobalArray     = RECORD
                            ap_version     : INTEGER16;
                            ap_count       : INTEGER16;
                            ap_id          : INTEGER16;
                            ap_pprivate    : ADDRESS;
                            ap_ptree       : ADDRESS;
                            ap_pmem        : ADDRESS;
                            ap_lmem        : INTEGER16;
                            ap_nplanes     : INTEGER16;
                            ap_resvd11     : INTEGER16;
                            ap_resvd12     : INTEGER16;
                            ap_bvdisk      : BITSET16;
                            ap_bvhard      : BITSET16;
                          END;
        PtrGlobalArray  = POINTER TO GlobalArray;
                 
        (*  AES-Parameterblock
         *)
        AESPB           = RECORD
                            pcontrl     : PtrAESContrlArray;
                            pglobal     : PtrGlobalArray;
                            pintin      : PtrIntinArray;
                            pintout     : PtrIntoutArray;
                            paddrin     : PtrAddrinArray;
                            paddrout    : PtrAddroutArray;
                          END;
        PtrAESPB        = POINTER TO AESPB;


                        (*  Abfrageroutinen  *)
                        (*  ===============  *)

PROCEDURE GetPBs (gemHdl: GemHandle; VAR vdipb: VDIPB; VAR aespb: AESPB);

        (*  Liefert die Parmeterbloecke zu einer GEM-Referenz.
         *
         *  Die zurueckgelieferten Parameterbloecke sind eine Kopie der
         *  Bloecke, die von der GEM-Library beim Aufruf einer VDI- bzw.
         *  AES-Routine benutzt werden, falls 'gemHdl' die zu diesem Zeit-
         *  punkt aktuelle GEM-Referenz ist (siehe 'GEMEnv.CurrGemHandle).
         *  Ist einer der Parameterbloecke mit dem Wert 'NIL' gefuellt, so
         *  kann die uebergebene GEM-Referenz fuer entsprechende Aufrufe
         *  (AES bzw. VDI) nicht benutzt werden.
         *)

PROCEDURE VDIHandle (dev: DeviceHandle): INTEGER16;

        (*  Liefert die zu einem Geraet gehoerende VDI-Geraetekennung.
         *)


                        (*  Aufrufroutinen  *)
                        (*  ==============  *)

PROCEDURE CallVDI (ptrpb: PtrVDIPB);

        (*  Ruft das VDI auf.
         *
         *  'ptrpb' spezifiziert den zu benutzenden Parameterblock.
         *)

PROCEDURE CallAES (ptrpb: PtrAESPB);

        (*  Ruft das AES auf.
         *
         *  'ptrpb' spezifiziert den zu benutzenden Parameterblock.
         *)

END GEMBase.
