DEFINITION MODULE XBIOS;

(*
 * XBIOS-Definition nach TDI V3.00
 *
 * Die engl. Dokumentation stammt von Paul Curtis (TDI).
 *)

FROM SYSTEM IMPORT BYTE, INTEGER16, INTEGER32, CARDINAL16, CARDINAL32, ADDRESS;
EXPORT QUALIFIED
	SetColour,
	ScreenPhysicalBase,
	ScreenLogicalBase,
	GetResolution,
	SetScreenBase,
	SetPalette,
	FloppyRead,
	FloppyWrite,
	FloppyFormat,
	MIDIWS,
	MFPint,
	IORec,
	ConfigureRS232,
	SetKeyTable,
	Random,
	PrototypeBootSector,
	FloppyVerify,
	ScreenDump,
	ConfigureCursor,
	SetDateTime,
	GetDateTime,
	BiosKeys,
	KeyboardWS,
	DisableInterrupt,
	EnableInterrupt,
	GIRead,
	GIWrite,
	GIOffBit,
	GIOnBit,
	SetTimerInterrupt,
	DoSound,
	ConfigurePrinter,
	KeyboardVectors,
	KeyboardRate,
	VSync,
	SuperExec,
	PuntAES,
	FlopRate,
	BlitMode,
	Bconmap,
	DMAread,
	DMAwrite,
	NVMaccess,
	Waketime,
	EsetShift,
	EgetShift,
	EsetBank,
	EsetColor,
	EsetPalette,
	EgetPalette,
	EsetGray,
	EsetSmear,
	CacheCtrl,
	WdgCtrl,
	ExtRsConf,
	MouseType,
	SerialDevice,
	SerialSpeed,
	IOREC,
	IORECPTR;

TYPE SuperExecProc = PROCEDURE(): INTEGER32;

TYPE

  (* InitMouse *)
  MouseType = (DisableMouse,
               RelativeMouse,
               AbsoluteMouse,
               UnusedMouse,
               KeycodeMouse);

  ParamBlk = RECORD
               topMode: (OriginBottom, OriginTop);
               buttons: BYTE;
               xParam: BYTE;
               yParam: BYTE;
               (* for AbsoluteMouse mode only: *)
               xMax: INTEGER16;
               yMax: INTEGER16;
               xinitial: INTEGER16;
               yInitial: INTEGER16;
             END;

  Palette = ARRAY [0..15] OF CARDINAL16;


  FlowFlavor = (NONE, XONXOFF, RTSCTS, XONXOFFRTSCTS);

  SerialDevice = (RS232, Keyboard, MIDI);

  SerialSpeed = (BPS19200, BPS9600, BPS4800, BPS3600, BPS2400, BPS2000,
                 BPS1800,  BPS1200, BPS600,  BPS300,  BPS200,  BPS150,
                 BPS134,   BPS110,  BPS75,   BPS50);


  IORECPTR = POINTER TO IOREC;

  IOREC = RECORD
            ibuf: ADDRESS;         (* pointer to buffer *)
            ibufsize: CARDINAL16;  (* buffer size *)
            ibufhd: CARDINAL16;    (* head index *)
            ibuftl: CARDINAL16;    (* tail index *)
            ibuflow: CARDINAL16;   (* low water mark *)
            ibufhi: CARDINAL16;    (* high water mark *)
          END;


  PrtConfig = (DaisyWheel,    (* dot/daisy *)
               Monochrome,    (* colour/mono *)
               EpsonPrinter,  (* Atari/Epson *)
               Final,         (* draft/final *)
               RS232Port,     (* parallel/RS232 *)
               SingleSheet,   (* form-feed/single sheet *)
               PC6, PC7, PC8, (* unused: *)
               PC9, PC10, PC11,
               PC12, PC13, PC14,
               PC15);

  PrtConfigSet = SET OF PrtConfig;

CONST
  NoAlter = PrtConfigSet{DaisyWheel..PC15}; (* passed to ConfigurePrinter *)


TYPE
  KeyTransPtr = POINTER TO KeyTrans;

  KeyTrans = ARRAY [0..127] OF BYTE;

  KeyTablePtr = POINTER TO KeyTable;

  KeyTable = RECORD
               unshift: KeyTransPtr;
               shift: KeyTransPtr;
               capslock: KeyTransPtr;
             END;

CONST

  (* resolutions for GetScreenResolution and SetScreen *)
  Low    = 0;
  Medium = 1;
  High   = 2;


  (* normal value given for virgin floppies *)
  VirginMedia = 0E5E5H;


TYPE

  Timer = (TimerA, TimerB, TimerC, TimerD);

  KBVectorPtr = POINTER TO KBVector;

  KBVector = RECORD
               midi: ADDRESS;      (* MIDI input *)
               kbderr: ADDRESS;    (* keyboard error *)
               midierr: ADDRESS;   (* MIDI error *)
               statvec: ADDRESS;   (* ikdb status packet *)
               mousevec: ADDRESS;  (* mouse packet *)
               clockvec: ADDRESS;  (* clock packet *)
               joyvec: ADDRESS;    (* joystick packet *)
             END;


(* initialise mouse packet handler. *)
PROCEDURE InitMouse(mtyp: MouseType; VAR param: ParamBlk; serveproc: ADDRESS);

(* set memory break point *)
PROCEDURE Ssbrk(count: INTEGER16): ADDRESS;

(* get the screen's physical base address at beginning of next vblank. *)
PROCEDURE ScreenPhysicalBase(): ADDRESS;

(* get the screen's logical (GSX) base address. *)
PROCEDURE ScreenLogicalBase(): ADDRESS;

(* return the screen's current resolution
   0: low, 1: medium, 2: high *)
PROCEDURE GetResolution(): INTEGER16;

(* set screen base address and resolutions.
   logLoc: new logical screen location.
   physLoc: new physical screen resolution.
   rez: new resolution.
   NOTE: specifying -1 for any of the above will not change the
           current value. *)
PROCEDURE SetScreenBase(logLoc, physLoc: ADDRESS; rez: INTEGER16);

(* set the contents of the hardware palette register. *)
PROCEDURE SetPalette(VAR palette: Palette);

(* set the colour of a palette table entry.
   colourNum: the palette entry to set colour of.
   colour: the new colour.
   returns: the old value of the palette entry. *)
PROCEDURE SetColour(colorNum, color: CARDINAL16): [ CARDINAL16 ];

(* read floppy disk sector(s) into buffer.
   buf: the buffer origin for the data.
   drive: 0 => A:, 1 => B:
   sector: sector number to start read from, normally 1..9.
   track: the track to seek to.
   side: the side to select.
   count: the number of sectors to read.
   returns: 0 => no error, otherwise DOS error code. *)
PROCEDURE FloppyRead(buffer: ADDRESS; drive: CARDINAL16;
                     sector, track, side: CARDINAL16;
                     count: CARDINAL16): INTEGER16;

(* write buffer to floppy disk sector(s).
   parameters as for FloppyRead, except data is written from the buffer.
   returns: 0 => no error, otherwise DOS error code. *)
PROCEDURE FloppyWrite(buffer: ADDRESS; drive: CARDINAL16;
                      sector, track, side: CARDINAL16;
                      count: CARDINAL16): INTEGER16;

(* format a floppy disk track.
   buf: buffer large enough to hold bit image of a track (8K for 9 spt)
   drive: the drive to format, 0 => A:, 1 => B:
   spt: the number of sectors per track, normally 9
   track: the track to format, 0 through 79.
   side: the side to format, 0 or 1.
   interleave: the interleave factor, normally 1.
   virgin: the word fill value for new sectors.
   returns: 0 => no error, otherwise DOS error code.
   note: on return buf holds zero terminated list of sectors that would
         not format. *)
PROCEDURE FloppyFormat(buffer: ADDRESS; drive: CARDINAL16;
                       spt, track, side: CARDINAL16;
                       interleave, virgin: CARDINAL16): INTEGER16;

(* write a string of characters to the MIDI port.
   str: the string to write.
   len: the number of characters to write - 1. *)
PROCEDURE MIDIWS(VAR str: ARRAY OF BYTE; len: CARDINAL16);

(* set MFP interrupt vector.
   intNo: the MFP interrupt vector to set.
   vector: the interrupt handler code. *)
PROCEDURE MFPint(intNo: CARDINAL16; vector: PROC);

(* return pointer to serial device IO record.
   NOTE: for the RS232 device, an output record immediately follows the
           input record returned by this function. It may be accessed by:
         VAR x: IORECPTR;
         x := IORec(RS232);
         INC(x, TSIZE(IOREC)); *)
PROCEDURE IORec(dev: SerialDevice): IORECPTR;

(* configure RS232 port.
   speed: the new RS232 speed.
   flowctl: the handshaking used.
   ucr, rsr, tsr, scr: set the appropriate 68901 registers. *)
PROCEDURE ConfigureRS232(baud: SerialSpeed;
                         handshake: FlowFlavor;
                         ucr, rsr, tsr, scr: INTEGER16): [ CARDINAL32 ];

(* set pointers to keyboard translation tables. *)
PROCEDURE SetKeyTable(unshift, shift, capslock: KeyTransPtr): KeyTablePtr;

(* return a random number. *)
PROCEDURE Random(): CARDINAL32;

(* prototype an image of a boot sector.
   buf: the buffer to put the image into. (512 bytes)
   serialNo: -1 => leave boot sector serial number unchanged.
             00000000..00FFFFFF => new serial number for disk.
             01000000..FFFFFFFE => generate random serial number.
   disktype: -1 => leave information alone.
              0 = 40 tracks, SS (180K)
              1 = 40 tracks, DS (360K)
              2 = 80 tracks, SS (360K)
              3 = 80 tracks, DS (720K)
   execFlag: 1 => bootable, 0 => non-bootable, -1 => leave alone. *)
PROCEDURE PrototypeBootSector(buffer: ADDRESS; serialNo: INTEGER32;
                              disktype: INTEGER16; execFlag: INTEGER16);

(* verify floppy disk sectors are readable.
   parameters as for FloppyRead, except buffer must br 1024 bytes long. *)
PROCEDURE FloppyVerify(buffer: ADDRESS; drive: CARDINAL16;
                       sector, track, side: CARDINAL16;
                       count: CARDINAL16): INTEGER16;

(* dump screen to printer. *)
PROCEDURE ScreenDump();

(* configure cursor blink rate and attributes.
   mode: based on video scan rate; -1 => no change.
   rate: 0 => flash, 1 => steady, -1 => no change.
   returns: hi byte = old blink rate, lo byte = old attributes. *)
PROCEDURE ConfigureCursor(mode, rate: INTEGER16): [ INTEGER16 ];

(* set the keyboard date and time.
   datetime: DOS format date & time; hi word = date, lo word = time. *)
PROCEDURE SetDateTime(datetime: CARDINAL32);

(* get the date and time.
   returns: DOS format date & time. *)
PROCEDURE GetDateTime(): CARDINAL32;

(* restore keymappings to power up settings *)
PROCEDURE BiosKeys;

(* write string to intelligent keyboard.
   str: the string to write.
   len: the number of characters to write - 1. *)
PROCEDURE KeyboardWS(VAR str: ARRAY OF BYTE; len: CARDINAL16);

(* disable given 68901 interrupt. *)
PROCEDURE DisableInterrupt(intNo: CARDINAL16);

(* enable given 68901 interrupt. *)
PROCEDURE EnableInterrupt(intNo: CARDINAL16);

(* read register on the sound chip.
   regno: the register number to read.
   returns: data in the register. *)
PROCEDURE GIRead(regno: CARDINAL16): CARDINAL16;

(* write register on the sound chip.
   regno: the register number to write.
   data: the data to write to the register. *)
PROCEDURE GIWrite(regno, data: CARDINAL16);

(* set a bit in the port A register to zero.
   bitno: the bit number to set to zero. *)
PROCEDURE GIOffBit(bitno: CARDINAL16);

(* set a bit in the port A register to one.
   bitno: the bit number to set to one. *)
PROCEDURE GIOnBit(bitno: CARDINAL16);

(* set an interrupt handler for timer.
   timer: the timer to install interrupt handler for.
   control: timer's control register setting.
   data: byte put into timer's data register.
   vec: the interrupt procedure. *)
PROCEDURE SetTimerInterrupt(which: Timer; control, data: CARDINAL16; vec: PROC);

(* set sound daemon's "program counter".
   x: the new program counter; program is a sequence of bytes of the
      form:
      { <opcode> <operand1> [<operand2> <operand3> ] }
      00 - 0F   sound register <opcode> := <operand1>
      80        temporary register := <operand1>
      81        sound register <operand1> := temporary register
                INC(temporary register,<operand2>) (*signed*)
                IF temporary register = <operand3> THEN
                  go to next instuction
                ELSE
                  wait for next update
                  repeat instruction
                END
      82 - FF   IF <operand1> = 0 THEN stop sound daemon
                ELSE set next update to <operand1> 50Hz ticks time
                END
      e.g. data for "bell" type sound:
      00 34 01 00 02 00 03 00 04 00 05 00 06 00 07 FE 08 10 09 00
      0A 00 0B 00 0C 10 0D 09 FF 00
*)
PROCEDURE DoSound(data: ADDRESS): [ ADDRESS ];

(* configure printer.
   config: the new printer configuration.
   returns: old printer configuration.
   NOTE: ConfigurePrinter(NoAlter) does not alter the old setting. *)
PROCEDURE ConfigurePrinter(config: PrtConfigSet): [ PrtConfigSet ];  (*0.10a*)

(* return pointer to keyboard vector table. *)
PROCEDURE KeyboardVectors(): KBVectorPtr;

(* set keyboard repeat rate and delay.
   initial: -1 => no change, otherwise initial delay, 50Hz.
   repeat: -1 => no change, otherwise repeat rate, 50Hz.
   returns: hi byte = old initial delay, lo byte = old repeat rate. *)
PROCEDURE KeyboardRate(initial, repeat: INTEGER16): [ CARDINAL16 ];

(* wait for next vertical blank interrupt. *)
PROCEDURE VSync;

(* Run code in supervisor mode with supervisor stack.
   Code: The code to run in supervisor mode, terminated with RTS.
   Note: The code is run with the supervisor stack. Do NOT attempt
         to allocate large amounts of local data as the supervisor
         stack will overflow. Note that the code in the "Code" proc
         must have stack checking turned off (with a -fno-stack-check option)
         otherwise a "stack overflow" error will be generated on entry
         to the procedure. *)
PROCEDURE SuperExec(Code: SuperExecProc): [ INTEGER32 ];

(* Throws away the GEM AES, freeing up memory. A re-boot will always be
   performed after this call (unless AES is in ROM) *)
PROCEDURE PuntAES;

(* Returns current seek rate of the floppy disk if -1 is passed to 'rate'.
   Otherwise the new 'rate' value is set.
   Works with ALL TOS-versions!
     drive: 0 => A:, 1 => B:, other values are not allowed!
     rate: -1 -> return current rate, 0: 6ms, 1: 12ms, 2: 2ms, 3: 3ms  *)
PROCEDURE FlopRate (drive: CARDINAL16; rate: INTEGER16): [ INTEGER16 ];

PROCEDURE BlitMode (flag: INTEGER16): [ BITSET ];
  (* Is only available on Blitter TOS (version 1.2) and higher! *)

(*
 * Die folgenden Funktionen sind nur auf einem Atari TT verfuegbar:
 *)

PROCEDURE Bconmap (devNo: INTEGER16): [ INTEGER32 ];

PROCEDURE DMAread (sector: CARDINAL32; count: CARDINAL16; buffer: ADDRESS;
                   devNo: CARDINAL16): INTEGER16;
PROCEDURE DMAwrite (sector: CARDINAL32; count: CARDINAL16; buffer: ADDRESS;
                   devNo: CARDINAL16): INTEGER16;

PROCEDURE NVMaccess (op, start, count: CARDINAL16; buffer: ADDRESS): [ INTEGER16 ];
PROCEDURE Waketime(date, time: CARDINAL16);

PROCEDURE EsetShift (shftMode: INTEGER16): [ INTEGER16 ];
PROCEDURE EgetShift (): INTEGER16;
PROCEDURE EsetBank (bankNum: INTEGER16): [ INTEGER16 ];
PROCEDURE EsetColor (colorNum, color: INTEGER16): [ INTEGER16 ];
PROCEDURE EsetPalette (colorNum, count: INTEGER16; palettePtr: ADDRESS);
PROCEDURE EgetPalette (colorNum, count: INTEGER16; palettePtr: ADDRESS);
PROCEDURE EsetGray (swtch: INTEGER16): [ INTEGER16 ];
PROCEDURE EsetSmear (swtch: INTEGER16): [ INTEGER16 ];
PROCEDURE CacheCtrl(opcode, param: INTEGER16): [ INTEGER32 ];
PROCEDURE WdgCtrl(opcode: INTEGER16): [ INTEGER32 ];
PROCEDURE ExtRsConf(command, device: INTEGER16; param: INTEGER32): [ INTEGER32 ];

END XBIOS.
