DEFINITION MODULE VDIInputs;


(*  Megamax-Modula 2 GEM-Library :  Die VDI Eingabefunktionen
 *
 *  Autor: Manuel Chakravarty           Erstellt :  04.11.87
 *
 *  Version 2.2         V#0006
 *)

FROM    GrafBase   IMPORT Point, Rectangle, PtrMouseFormDef;
FROM    GEMGlobals IMPORT GemChar, MButtonSet, SpecialKeySet;
FROM    GEMShare   IMPORT DeviceHandle, logInpDev, inputMode;


(*  SetInputMode -- Legt das logische Eingabegeraet und dessen Eingabe-  *
 *                  modus fest. Der Aufruf wird nur ausgefuehrt, wenn    *
 *                  die zu setzende Einstellung sich von der momentanen *
 *                  Einstellung unterscheidet. !! 'GemError' beachten!! *)
PROCEDURE SetInputMode (handle:DeviceHandle; dev:logInpDev; mode: inputMode);

(*  Der Mauszeiger wird auf eine bestimmte Position gesetzt,
 *  danach wird gewartet, bis eine Taste oder ein Mausknopf
 *  gedrueckt wird.
 *
 *  'start'     -- An diese Stelle wird der Mauszeiger gesetzt.
 *  'termbut'   -- Code der Taste, die zum Abbruch fuehrte.
 *                 ( = 32/33: linke bzw. rechte Maustaste)
 *
 *  ACHTUNG: Die Routine funktioniert nur bei physikalisch
 *           geoeffneten Arbeitsstationen (Devices), jedoch
 *           nicht bei virtuellen (wie dem Bildschirm)!
 *)
PROCEDURE RequestLoc(handle: DeviceHandle; start: Point; VAR termBut: CHAR; VAR loc: Point);

(*  Entspricht 'RequestLoc' nur wird nicht gewartet, bis eine Taste
 *  gedrueckt ist, sondern gleich zurueckgekehrt.
 *  Ist 'keyPress = TRUE', so wurde eine Taste betaetigt.
 *  Ist 'koorChange = TRUE', so wurde der Mauszeiger bewegt.
 *
 *  ACHTUNG: Die Routine funktioniert nur bei physikalisch
 *           geoeffneten Arbeitsstationen (Devices), jedoch
 *           nicht bei virtuellen (wie dem Bildschirm)!
 *)
PROCEDURE TestLoc(handle: DeviceHandle;
               start               : Point;
           VAR termbut             : CHAR;
           VAR keyPress, koorChange: BOOLEAN;
           VAR loc                 : Point);


(*      Die folgenden acht Routinen arbeiten in der aktuellen TOS-Version
 *      nicht. Evtl. mit GDOS.
 *)

(*  Der Startwert 'start' kann vom Anwender solange mit den
 *  Cursortasten veraendert werden, bis er eine andere Taste
 *  drueckt.
 *  'value' liefert den neuen Wert und 'termBut' die Taste,
 *  mit der abgebrochen wurde.
 *  Wert liegt zwischen 1 und 100
 *)
PROCEDURE RequestValue(    handle : DeviceHandle;
                    start  : CARDINAL;
                VAR termBut: CHAR;
                VAR value  : CARDINAL);

(*  Entspricht 'RequestValue', nur wird sofort zurueckgekehrt und
 *  'status' enthaelt
 *
 *    'nothingHappened', falls keine Benutzeraktion erfolgte,
 *    'valueChanged'   , falls der Wert geaendert wurde,
 *    'keyPressed'     , falls eine Taste gedrueckt wurde.
 *)
TYPE    TValState       = (nothingHappened, valueChanged, keyPressed);
PROCEDURE TestValue(handle : DeviceHandle;
                 start  : CARDINAL;
             VAR termbut: CHAR;
             VAR status : TValState;
             VAR value  : CARDINAL);

(*  Es wird gewartet bis eine Taste gedrueckt wird.
 *  War es eine Funktionstaste, so wird deren Nummer in 'choice'
 *  geliefert, sonst der in 'start' uebergebenen Wert (1 - 10).
 *)
PROCEDURE RequestChoice(handle: DeviceHandle; start: CARDINAL; VAR choice: CARDINAL);

(*  Wie 'TestChoice', nur wird nicht gewartet. Und es ist 'keyPress
 *  = TRUE', falls eine Funktionstaste betaetigt wurde.
 *)
PROCEDURE TestChoice(handle: DeviceHandle; VAR keyPress: BOOLEAN; VAR choice: CARDINAL);

(*  Wartet bis ein String vollstaendig, durch <Return> abgeschlossen,
 *  eingegeben wurde. Falls 'echo = TRUE' ist, wird die Eingabe ab
 *  der Position 'echoLoc' auf dem Bildschirm ausgegeben.
 *
 *  ACHTUNG: Diese Routine ist in der aktuellen Version nicht impl.
 *)
PROCEDURE RequestString(handle: DeviceHandle;
                 VAR str    : ARRAY OF CHAR;
                     echo   : BOOLEAN;
                     echoLoc: Point);

(*  Entspricht 'RequestString' nur wird nicht auf ein <Return> ge-
 *  wartet. Ist 'success = TRUE', so wurde mindestens ein Zeichen
 *  gelesen.
 *
 *  ACHTUNG: Diese Routine ist in der aktuellen Version nicht impl.
 *)
PROCEDURE TestString(handle: DeviceHandle;
              VAR str    : ARRAY OF CHAR;
                  echo   : BOOLEAN;
                  echoLoc: Point;
              VAR success: BOOLEAN);

(*  Die durch 'newForm' spezifierte Mausform wird durch diese
 *  Routine gesetzt.
 *)
PROCEDURE SetMouseForm(handle: DeviceHandle; newForm: PtrMouseFormDef);

(*  Der Grafikcursor (Mauszeiger) wird sichtbar gemacht.
 *  Da das VDI mitzaehlt, wie oft der Zeiger versteckt wurde, muss
 *  er auch entsprechend oft sichtbar gemacht werden. Dies kann
 *  umgangen werden, indem man fuer 'force' den Wert 'TRUE' an-
 *  gibt. Daraufhin wird der Cursor auf alle Faelle angezeigt.
 *
 *  ACHTUNG: Diese Funktion darf nur bei physikalisch geoeffneten
 *           Arbeitstationen (Devices) verwendet werden. Beim
 *           Bildschirm (eine virtuelle Arbeitsstation) muessen
 *           Sie stattdessen die Funktion "GrafMouse" aus
 *           AESGraphics verwenden!
 *)
PROCEDURE ShowCursor(handle: DeviceHandle; force: BOOLEAN);

(*  Der Grafikcursor wird versteckt (unsichtbar).
 *  Siehe auch 'ShowCursor'.
 *
 *  ACHTUNG: Diese Funktion darf nur bei physikalisch geoeffneten
 *           Arbeitstationen (Devices) verwendet werden. Beim
 *           Bildschirm (eine virtuelle Arbeitsstation) muessen
 *           Sie stattdessen die Funktion "GrafMouse" aus
 *           AESGraphics verwenden!
 *)
PROCEDURE HideCursor(handle: DeviceHandle);

(*  Es wird die aktuelle Position des Mauszeigers ('position')
 *  und der Status (gedrueckt oder nicht) der Mausknoepfe ('buts')
 *  erfragt.
 *)
PROCEDURE GetMouseState (handle: DeviceHandle; VAR position: Point; VAR buts: MButtonSet);

(*  Es wird ermittelt welche Sondertasten (Alternate, Control,
 *  linke und rechte Shifttaste) gedrueckt sind.
 *)
PROCEDURE KeyboardState (handle: DeviceHandle): SpecialKeySet;


END VDIInputs.
