DEFINITION MODULE VDIOutputs;
#define REF


(*  Megamax Modula-2 GEM-Library :  Die VDI Ausgabefunktionen
 *
 *  Autor: Manuel Chakravarty           Erstellt :  31.10.87
 *
 *  Version   2.2     V#0015
 *)


(*      Dieses Modul enthaelt die Ausgaberoutinen des VDI. Darunter fallen
 *      zehn besonders auf, dies sind die GDP (Generalized Drawing Primi-
 *      tives), was soviel wie 'Allgemeine Zeichengrundfunktionen' heisst.
 *      Ob diese Funktionen auf dem jeweiligen Geraet vorhanden sind, kann
 *      aus den von 'GEMEnv.DeviceParameter' gelieferten Werten ersehen
 *      werden.
 *)


FROM GrafBase IMPORT Point, Rectangle, WritingMode;

FROM GEMShare IMPORT DeviceHandle;
FROM GEMVDIbase IMPORT PxyArrayType;


(*  HINWEIS  zu den folgenden 3 Routinen:
 *           Die maximale Anzahl der Punkte, die bei einem Aufruf im
 *           jeweiligen Open Array-Parameter angegeben werden kann,
 *           kann mit 'GEMEnv.MaxPoints()' erfragt werden.
 *)

(*  Zeichnet einen Linienzug.
 *
 *  Die Stuetzpunkte werden in 'pts' uebergeben und 'noLines' ent-
 *  haelt die Anzahl der Linien. Ist 'noLines = 0', so wird das
 *  gesamte 'pts'-Array ausgewertet.
 *
 *  Achtung: Das VDI laesst nur eine begrenzte Anzahl Punkte zu!
 *  Die Anzahl ist TOS-abhaengig und kann ueber 'GEMEnv.MaxPoints ()'
 *  ermittelt werden.
 *
 *  Es werden die mit 'VDIAttributes' gesetzten Linienattribute
 *  ausgewertet.
 *)
PROCEDURE PolyLine(handle: DeviceHandle; VAR (* REF *) pts: ARRAY OF Point; noLines: CARDINAL);
(* TDI: PROCEDURE PolyLine(handle: INTEGER; moLines: INTEGER; VAR (* REF *) Point: ARRAY OF INTEGER); *)

(*  Diese Funktion zeichnet im Gegensatz zur vorherigen nicht den
 *  vollstaendigen Linienzug, sondern nur dessen Eckpunkte. Das Aus-
 *  sehen dieser Punkte wird mit den Makierungsattributen bestimmt.
 *  Die Bedeutung von 'noMarks' entspricht der von 'noLines' bei
 *  'PolyLine'.
 *
 *  Achtung: Das VDI laesst nur eine begrenzte Anzahl Punkte zu!
 *  Die Anzahl ist TOS-abhaengig und kann ueber 'GEMEnv.MaxPoints ()'
 *  ermittelt werden.
 *)
PROCEDURE PolyMarker(handle: DeviceHandle; VAR (* REF *) marks: ARRAY OF Point; noMarks: CARDINAL);
(* TDI: PROCEDURE PolyMarker(handle: INTEGER; moLines: INTEGER; VAR (* REF *) Point: ARRAY OF INTEGER); *)

(*  Hier wird nicht einfach ein Polygonzug wie bei 'PolyLine' ge-
 *  zeichnet, sondern die beschriebene Innenflaeche gefuellt, dabei
 *  werden die aktuellen Fuellattribute beruecksichtigt. Zur Aufgabe
 *  von 'noEdges', siehe 'noLines' bei 'PolyLine'.
 *
 *  Achtung: Das VDI laesst nur eine begrenzte Anzahl Punkte zu!
 *  Die Anzahl ist TOS-abhaengig und kann ueber 'GEMEnv.MaxPoints ()'
 *  ermittelt werden.
 *)
PROCEDURE Polygon(handle: DeviceHandle; VAR (* REF *) pts: ARRAY OF Point; noEdges: CARDINAL);
PROCEDURE FillArea(handle: DeviceHandle; noEdges: CARDINAL; VAR (* REF *) pts: ARRAY OF INTEGER16);


(*  Dies ist lediglich ein vereinfachter Aufruf von 'PolyLine'.
 *  Es wird eine Linie von 'p' nach 'q' gezogen.
 *)
PROCEDURE Line(handle: DeviceHandle; p, q: Point);

(*  Diese Routine fuehrt ein 'PolyMarker'-Aufruf durch, bei dem
 *  eine einzelne Makierung auf den Punkt 'p' gesetzt wird.
 *)
PROCEDURE Mark(handle: DeviceHandle; p: Point);

(*  Hiermit wird ein Text auf dem Grafikbildschirm ausgegeben.
 *
 * 'text'       -- der auszugebende Text
 * 'start'      -- hier beginnt die Textausgabe
 *
 *  Die Textausgabe wird mit den eingestellten Textattributen
 *  vorgenommen. Standardmaessig wird der Text am linken Rand
 *  und der Grundlinie (base line) justiert, dies ist bei der
 *  Wahl von 'start' zu beachten.
 *  Die Lage der Grundlinie kann mit 'VDIInquires.GetFaceInfo' er-
 *  fragt werden.
 *)
PROCEDURE GrafText(handle: DeviceHandle; start: Point; REF text: ARRAY OF CHAR);
PROCEDURE GraphicText(handle: DeviceHandle; x, y: INTEGER; REF text: ARRAY OF CHAR);

(*  Diese Routine teilt eine Bildschirmbereich in einzelne Felder,
 *  die unterschiedlich gefaerbt werden.
 *  'frame'      -- der Bildschirmbereich
 *  'rowlength'  -- die Anzahl der Spalten pro Zeile
 *  'noRows'     -- die Anzahl der Zeilen
 *  'mode'       -- gibt den Schreibmodus
 *  'colArray'   -- enthaelt die einzelnen Farben
 *
 *  HINWEIS: Diese Routine ist im aktuellen TOS nicht implementiert.
 *
 *           Ausserdem ist sie in der aktuellen Modulversion noch
 *           nicht implementiert.
 *)
PROCEDURE CellArray(handle                      : DeviceHandle;
                 frame                       : Rectangle;
                 rowLength, usedElems, noRows: CARDINAL;
                 mode                        : WritingMode;
             REF colArray                    : ARRAY OF CARDINAL);

(*  Diese Procedur fuellt einen beliebig geformten Bereich,
 *  der entweder durch eine Randfarbe bestimmt wird oder des-
 *  sen Form durch die Verteilung der Innenfarbe definiert ist
 *
 *  'tagColor'  -- die Randfarbe
 *  'useTag'    -- '=TRUE': Bereich wird durch Randfarbe bestimmt
 *                 '=FALSE': ..wird durch die Verteilung der In-
 *                 nenfarbe bestimmt
 *  'start'     -- Punkt in Inneren des zu Fuellenden Bereichs.
 *                 Die Farbe dieses Punktes legt die Innenfar-
 *                 be fest.
 *)
PROCEDURE ContourFill(handle: DeviceHandle; start: Point; tagColor: CARDINAL; useTag: BOOLEAN);
(* TDI: PROCEDURE ContourFill(handle: INTEGER; x, y: INTEGER; color: INTEGER); *)

(*  Es wird ein Rechteck mit den durch 'frame' bestimmten Aus-
 *  massen gezeichnet. Das Aussehen wird durch die Fuellattribute
 *  festgelegt.
 *)
PROCEDURE FillRectangle(handle: DeviceHandle; frame: Rectangle);
(* TDI: PROCEDURE FillRectangle(handle: INTEGER; REF pxy: PxyArrayType); *)


(*  Generalized Drawing Primitives  *)
(*  ==============================  *)

(*  Alle Winkelangaben, die in einem Teil der folgenden zehn Routinen vor-
 *  kommen, muessen in 1/10 Grad gemacht werden. Dabei gilt:
 *
 *                              900
 *                               |
 *                               |
 *                      1800 ----+---- 0
 *                               |
 *                               |
 *                              2700

 *  Bei allen gefuellten Objekten werden die Fuellattribute Fuelltyp, Fuell-
 *  index, Fuellfarbe und Begrenzungslinie ausgewertet.
 *
 *  Bei allen linierten Objekten (z.B. Arc) werden die Linienattribute
 *  Linienstaerke, Linientyp, Linienfarbe und das Aussehen der Linienenden
 *  beruecksichtigt.
 *
 *  Bei der Textausgabe werden die Textattribute ausgewertet, dies sind
 *  Textgroesse, Winkel des Textes, Textfarbe, Texteffekte und die Textaus-
 *  richtung.
 *
 *  Zusaetzlich wird bei jeder Routine noch der Zeichenmodus beachtet.
 *
 *  Jedes oben aufgefuehrte Attribut kann mit Routinen des Moduls
 *  'VDIAttributes' eingestellt werden.
 *)


(*  Diese Routine zeichnet einen ausgefuellten Balken. Es werden
 *  alle Fuellattribute beruecksichtigt.
 *)
PROCEDURE Bar(handle: DeviceHandle; frame: Rectangle);
PROCEDURE DrawBar(handle: DeviceHandle; REF pxy: PxyArrayType);

(*  Damit zeichnet man einen Kreisbogen, dessen Mittelpunkt
 *  durch 'middle' und dessen Radius durch 'radius' festge-
 *  legt wird. Der Bogen beginnt bei 'beg' (Winkelangabe)
 *  und endet bei 'end' (ebenfalls in Grad).
 *)
PROCEDURE Arc(handle: DeviceHandle; middle: Point; radius, beg, end: CARDINAL);
PROCEDURE DrawArc(handle: DeviceHandle; x, y, radius, beg, end: INTEGER);

(*  Diese Routine arbeitet genauso wie 'Arc', nur dass statt des
 *  Kreisbogens ein ganzer Kreisausschnitt, gefuellt, gezeichnet
 *  wird. Kann z.B. in Tortengrafiken verwendet werden.
 *)
PROCEDURE Pie(handle: DeviceHandle; middle: Point; radius, beg, end: CARDINAL);
PROCEDURE DrawPieSlice(handle: DeviceHandle; x, y, radius, beg, end: INTEGER);

(*  Diese Prozedur zeichnet nun einen vollstaendig gefuellten
 *  Kreis, mit 'middle' als Mittelpunkt und 'radius' als Radius.
 *)
PROCEDURE Circle(handle: DeviceHandle; middle: Point; radius: CARDINAL);
PROCEDURE DrawCircle(handle: DeviceHandle; x, y, radius: INTEGER);

(*  Zeichnet eine gefuellte Ellipse, deren Mittelpunkt 'middle' ist.
 *  'xradius' gibt die Laenge der horizontalen und 'yradius' die der
 *  vertikalen Halbachse an.
 *)
PROCEDURE Ellipse(handle: DeviceHandle; middle: Point; xradius, yradius: CARDINAL);
PROCEDURE DrawEllipse(handle: DeviceHandle; x, y, xradius, yradius: INTEGER);

(*  Es wird ein elliptischer Bogen, von 'beg' bis 'end' (Winkel-
 *  angabe), gezeichnet. 'middle', 'xradius' und 'yradius' geben
 *  den Mittelpunkt bzw. die horizontale und vertikale Halbachse
 *  der zu Grunde liegenden Ellipse an.
 *)
PROCEDURE ElliptArc(handle: DeviceHandle; middle: Point; xradius, yradius, beg, end: CARDINAL);
PROCEDURE DrawEllipticalArc(handle: DeviceHandle; x, y, xradius, yradius, beg, end: INTEGER);

(*  Entspricht 'ElliptArc', nur wird statt des Bogens ein ge-
 *  fuellte Ellipsenausschnitt gezeichnet.
 *)
PROCEDURE ElliptPie(handle: DeviceHandle; middle: Point; xradius, yradius, beg, end: CARDINAL);
PROCEDURE DrawEllipticalPie(handle: DeviceHandle; x, y, xradius, yradius, beg, end: INTEGER);

(*  Damit kann man ein Rechteck zeichnen, dessen Ecken abgerundet
 *  sind. Die Ausmasse werden durch 'frame' bestimmt.
 *)
PROCEDURE RoundRect(handle: DeviceHandle; frame: Rectangle);
PROCEDURE DrawRoundedBox(handle: DeviceHandle; REF pts: PxyArrayType);


(*  Entspricht 'RoundRect', nur wird das Innere des Rechtecks,
 *  entsprechend der aktuellen Fuellattribute gefuellt.
 *)
PROCEDURE FillRoundRect(handle: DeviceHandle; frame: Rectangle);
PROCEDURE DrawRoundedFilledBox(handle: DeviceHandle; REF pts: PxyArrayType);

(*  Diese Routine gibt eine formatierte Textzeile aus.
 *
 *  'str'
 *  'start'     -- bestimmt, wo der Text erscheint. Bei der
 *                 Festlegung muss auf die aktuelle Textaus-
 *                 richtung geachtet werden. Standardmaessig ist
 *                 sie so eingestellt, dass 'start' das linke Ende
 *                 der Grundlinie (base line) angibt.
 *  'length'    -- gibt an, wie breit (in Pixel) er sein soll
 *  'wSpace' bzw.
 *  'cSpace'    -- geben an, ob eine Dehnung in Wort- bzw.
 *                 Zeichenzwischenraeumen erlaubt ist.Ist sie
 *                 erlaubt, so versucht die Routine den Text so
 *                 zu dehnen, dass er die in 'length' angegebene
 *                 Breite hat.
 *
 *)
PROCEDURE JustifiedText(handle: DeviceHandle; start: Point; length: CARDINAL; wSpace, cSpace: BOOLEAN; REF str: ARRAY OF CHAR);

END VDIOutputs.
