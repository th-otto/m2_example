DEFINITION MODULE Excepts;
#define REF

(*
 * Low-Level Modul, mit dem Modula-Prozeduren ohne Assembler-Einsatz
 * zum Abfangen jeder beliebigen Prozessor-Exception (TRAP-Instruktionen,
 * Bus-Error, usw.) installiert werden koennen.
 * Damit ist es beispielsweise ein Kinderspiel, die TRAP #2 - Aufrufe
 * zu den GEM-Funktionen abzufangen, um dann eine eigene File-Selektor-
 * Funktion statt der Normalen ausfuehren zu lassen.
 *
 * Ein kurzes Beispielprogramm ist
 *
 *   ExcDemo.M  im DEMO-Ordner
 *)


FROM SYSTEM IMPORT ADDRESS;

FROM MOSGlobals IMPORT MemArea;

FROM SysTypes IMPORT ExcSet, Exceptions, BusError, AddrError, ExcDesc, ExcDescPtr;


(*
 * Installiert eine Exception-Behandlungsroutine 'call' fuer die
 * in 'traps' angegebenen Exceptions. Der Routine 'call' wird
 * bei Eintritt einer der Exceptions ein Feld mit allen Systemregistern
 * (ExcDesc) uebergeben. Bei Rueckkehr der Routine muss sie entweder FALSE
 * liefern, wenn das durch den Fehler unterbrochene Programm weiterge-
 * fuehrt werden soll (ggf. muss 'regPC' hinter die fehlerausloesende Anwei-
 * sung gesetzt werden) oder TRUE liefern, wenn evtl. vor dem 'InstallExc'
 * Aufruf installierte Routinen zusaetzlich ausgefuehrt werden sollen
 * (dies ist z.B. bei Interrupt-Routinen und 'EtvTimer' sinnvoll).
 *
 * Ist 'usermode' TRUE, wird die Routine 'call' im User-Mode aufgerufen.
 * Ist 'usermode' FALSE, wird sie im Supervisor-Mode aufgerufen (ist
 * u.a. auch schneller!). Allerdings darf dies nicht auf die Buserror-
 * und Addresserror-Exceptions angewendet werden!
 *
 * Bei Misserfolg (weil zu wenig freier Speicher) ist 'hdl' = NIL; ansonsten
 * ist 'hdl' bei Freigabe der Exceptions mit 'DeInstallExc' wieder zu
 * uebergeben.
 *
 * 'call' erhaelt in 'ExcDesc.parms' den Zeiger auf die evtl. auf dem Stack
 * uebergebenen Daten.
 *
 * Vorsicht: Wenn mit dieser Funktion Interruptroutinen installiert werden,
 * kann es passieren, dass schon vor Rueckkehr aus dieser Funktion die
 * Prozedur 'call' aufgerufen wird! Ggf. muessen vor diesem Aufruf die
 * Interrupts gesperrt werden.
 *
 * Falls die aufzurufende Prozedur in Assembler programmiert wird,
 * weisen wir darauf hin, dass es noetig ist, die Register D3-D7/A3-A6,
 * wie bei jeder normalen Modula-Routine, zu retten!
 *)
TYPE PreExcProc = PROCEDURE (ExcDescPtr): BOOLEAN;
                      (* RETURN: FALSE: Return from Exc, TRUE: call others *)

PROCEDURE InstallPreExc (REF traps: ExcSet;
                         call: PreExcProc; usermode: BOOLEAN;
                         workSpace: MemArea; VAR hdl: ADDRESS);


(*
 * Wie 'InstallPreExc', jedoch werden bei Auftreten der Exception
 * zuerst die vorher installierten Handler und erst dann 'call'
 * aufgerufen.
 *)
TYPE PostExcProc = PROCEDURE (ExcDescPtr);

PROCEDURE InstallPostExc (REF traps: ExcSet;
                          call: PostExcProc; usermode: BOOLEAN;
                          workSpace: MemArea; VAR hdl: ADDRESS);


(*
 * Entfernt alle unter 'hdl' installierte Exception-Handler.
 *)
PROCEDURE DeInstallExc (VAR hdl: ADDRESS);


(*
Following would occupy the largest available integral type in GNU Modula-2
(8 bytes).
TYPE HardExceptions = [2..255];
*)
TYPE HardExceptions = INTEGER;

(*
 * Simuliert die gewuenschte Exception 'excNo' an der Stelle hinter
 * dem Aufruf dieser Funktion.
 *
 * Darf sowohl im Usermode als auch im Supervisormode aufgerufen werden -
 * allerdings nicht in Interruptroutinen, die im Usermode ablaufen.
 *)
PROCEDURE RaiseExc (excNo: HardExceptions);


PROCEDURE SysInstallPreExc (REF traps: ExcSet; call: PreExcProc;
             usermode: BOOLEAN; workSpace: MemArea; VAR hdl: ADDRESS);

PROCEDURE SysInstallPostExc (REF traps: ExcSet; call: PostExcProc;
             usermode: BOOLEAN; workSpace: MemArea; VAR hdl: ADDRESS);

END Excepts.
