DEFINITION MODULE AESObjects;


(*  Megamax-Modula 2 GEM-Library :  Die AES Objektfunktionen
 *
 *  Autor: Manuel Chakravarty           Erstellt :  05.11.87
 *
 *  Version   2.2     V#0010
 *)
 
(*      In diesem Modul befinden sich die AES Routinen, die zur allgemeinen
 *      Manipulation von Objektbaeumen dienen.
 *)
 
 
FROM SYSTEM IMPORT ADDRESS;
FROM    GrafBase   IMPORT Point, Rectangle;

FROM    GEMGlobals IMPORT PtrObjTree, OStateSet, GemChar;
 
 
(*  Object Manager  *)
(*  ==============  *)

(*  Ein Objekt wird in die Nachfolgerliste eines anderen
 *  eingereiht.
 *
 *  Eingabeparameter
 *  ----------------
 *
 *  'child'     -- Index des Objekts, das in die Nachfolger-
 *                 liste von
 *  'parent'    -- eingereiht wird.
 *  'tree'      -- Sowohl 'parent' als auch 'child' muss
 *                 Element diese Objekbaumes sein.
 *)
PROCEDURE AddObject(tree: PtrObjTree; parent, child: CARDINAL);
CONST ObjectAdd = AddObject;

(*  Ein Objekt wird aus einem Objektbaum entfernt.
 *
 *  'index'     -- Das zu entferndende Objekt
 *  'tree'      -- Der Objektbaum, dessen Element 'index' sein muss.
 *)
PROCEDURE DeleteObject(tree: PtrObjTree; index: CARDINAL);
CONST ObjectDelete = DeleteObject;

(*  Ein Objektbaum wird bis zu der gewuenschten Tiefe auf dem
 *  Bildschirm dargestellt. Es werden nur die Teile sichtbar,
 *  die sich innerhalb eines angegebenen Rahmens befinden.
 *  Diese Routine dient zum Beispiel zum Zeichnen von Dialogboxen.
 *
 *  'tree'      -- Der darzustellende Baum
 *  'start'     -- Der Index, ab dem der Baum dargestellt werden
 *                 soll.
 *  'depth'     -- Bis zu dieser Tiefe wird der Baum dargestellt.
 *  'frame'     -- Es werden die Teile sichtbar, die in diesem
 *                 Rahmen liegen.
 *
 *  Fuer 'depth' gilt:
 *
 *      0          -- Es wird nur das Startobjekt untersucht
 *      1          -- Startobjekt und die erste Ebene von Nachfolgern
 *      .
 *      .
 *      .
 *  'MaxDepth'     -- Maximale Tiefe
 *
 *  'MaxDepth' kann aus 'GEMGlobals' importiert werden.
 *)
PROCEDURE DrawObject(tree: PtrObjTree; start,depth: CARDINAL; frame: Rectangle);
PROCEDURE ObjectDraw(tree: ADDRESS; start, depth: INTEGER; x, y, w, h: INTEGER);

(*  Diese Prozedur sucht ein Objekt in einem Baum, das sich beim
 *  darstellen des Baumes an einer bestimmten Stellen auf dem
 *  Bildschirm befindet. Als Ergebnis wird der Index des Objekts
 *  geliefert.
 *
 *  'tree'      -- Der Objektbaum
 *  'spot'      -- Bezeichnet die Stelle, an der das Objekt auf
 *                 dem Bildschirm befindet.
 *  'start'     -- Die Suche im Baum beginnt bei diesem Index
 *  'depth'     -- Die Suchtiefe
 *
 *  Wird 'GEMGlobals.NoObject' zurueckgegeben, so befindet sich
 *  an dieser Stelle kein Objekt. Zu 'depth' siehe 'DrawObject'.
 *)
PROCEDURE FindObject(tree: PtrObjTree; start, depth: CARDINAL; spot: Point): CARDINAL;
PROCEDURE ObjectFind(tree: ADDRESS; start, depth: INTEGER; x, y: INTEGER): INTEGER;

(*  Diese Funktion liefert die Bildschirmposition auf der ein
 *  Objekt beim Zeichnen seines Baumes dargestellt wird.
 *
 *  'index'     -- Index des Objekts
 *  'tree'      -- der Objektbaum
 *)
PROCEDURE ObjectOffset(tree: PtrObjTree; index: CARDINAL): Point;
(* PROCEDURE ObjectOffset(tree: ADDRESS; index: INTEGER; VAR x, y: INTEGER); *)

(*  Ein Objekt wird in seiner Nachfolgerliste an ein neue Posi-
 *  tion bewegt.
 *
 *  'tree'      -- der Objektbaum
 *  'index'     -- das Objekt
 *
 *  Die Position wird von 'newPos' folgendermassen bestimmt:
 *
 *    0    -- An die erste Stelle
 *    1    -- An die zweite Stelle
 *   usw.
 *
 *   -1    -- An die letzte Stelle
 *)
PROCEDURE ObjectOrder(tree: PtrObjTree; index : CARDINAL; newPos: INTEGER);


(*  Diese Routine macht einen Teil der Arbeit, die bei Edieren
 *  eines Edit-Feldes vom Anwender anfaellt.
 *
 *  'tree'      -- der Objektbaum
 *  'index'     -- das zu edierende Objekt
 *
 *  Weiter sind vier Modi zu unterscheiden:
 *  'startEdit' -- Wird in dieser GEM Version nicht unterstuetzt
 *  'initEdit'  -- Objektzeichenketten formatieren und Textcursor
 *                 einschalten
 *  'charEdit'  -- Ein Zeichen verarbeiten und dabei die Zeichen-
 *                 ketten und den Bildschirm aktuallisieren
 *  'endEdit'   -- Ende des Ediervorganges
 *
 *  Vor dem Aufruf dieser Routine muss sich das Objekt schon auf
 *  dem Bildschirm befinden. Ausserdem muss es vom Typ 'fText'
 *  oder 'fBoxText' sein.
 *  Im 'charEdit'-Modus muss in 'ch' das Zeichen uebergeben werden,
 *  das an der Position 'charPos' in die Textzeichenkette des
 *  Objektes, eingefuegt werden soll. Bei der Rueckkehr steht in
 *  'charPos' daraufhin die Zeichenposition, in die als naechste
 *  etwas geschrieben werden sollte. Die Routine wertet auch
 *  teilweise Tasten wie zum Beispiel Escape und Backspace aus.
 *)
TYPE    EditObjMode     = (startEdit, initEdit, charEdit, endEdit);
PROCEDURE EditObjText(tree : PtrObjTree; index: CARDINAL; ch: GemChar; VAR charPos: CARDINAL; edKind: EditObjMode);
PROCEDURE ObjectEdit(tree: ADDRESS; index: INTEGER; ch: INTEGER; pos: INTEGER; kind: INTEGER; VAR newpos: INTEGER);

(*  Diese Prozedur dient zum Aendern des Objektstatus eines Objektes
 *
 *  'index'     -- Index des Objekts
 *  'tree'      -- der Objektbaum
 *  'newState'  -- der neue Status
 *  'reDraw'    -- 'TRUE': das Objekt wird zusaetzlich neu gezeichnet
 *                 es sollte sich aber in diesem Fall schon auf dem
 *                 Bildschirm befinden.
 *
 *  Es ist darauf zu achten, dass pro Aufruf dieser Routine nur ein
 *  Element der Statusmenge geaendert wird.
 *)
PROCEDURE ChangeObjState(tree: PtrObjTree; index: CARDINAL; frame: Rectangle; newState: OStateSet; redraw: BOOLEAN);
PROCEDURE ObjectChange(tree: ADDRESS; index, depth: INTEGER; x, y, w, h: INTEGER; newState: INTEGER; redraw: INTEGER);


END AESObjects.
