DEFINITION MODULE MOSConfig;

(*
 * Enthaelt globale Konfigurationswerte fuer die MOS-Module.
 * Die Werte werden den meisten Variablen im Implementationsteil
 * zugewiesen, die standardmaessig eingesetzten Werte stehen in Klammern.
 * Restliche Variablen werden z.B. in 'GEMError' initialisiert, falls
 * dies mitgelinkt wird.
 *)

FROM SYSTEM     IMPORT ADDRESS, CSIZE_T, INTEGER16;
FROM SysTypes   IMPORT CHARSET, ExcSet;
FROM MOSGlobals IMPORT SfxStr;

(* Loader: *)

(* Default Suffix bei 'CallModule' ("MOD") *)
CONST DftSfx = 'mod';

(* Suffix der importierten Module  ("IMP") *)
CONST ImpSfx = 'imp';


(* max. Anzahl der gleichzeitig startbaren Module bei 'CallModule' *)
CONST MaxModExec = 100; (* Max. Anzahl gleichz. startbarer Module (100) *)


(* Convert: *)

(*
 * Wird bei den REAL-Umwandlungen in Textform zur Trennung der
 * Nachkommastellen verwendet. (",")
 * US-Norm: RadixChar:='.' / Deutsch: RadixChar:=',';
 *)
CONST RadixChar = '.';

(*
 * Diese Variablen waehlen die Darstellungsform von REAL-Zahlen bei
 * Umwandlung mit 'ConvReal' oder Ausgabe mit 'WriteReal':
 * Festkomma, falls FixToFloatMin<=ABS(v) und ABS(v)<=FixToFloatMax,
 * sonst Fliesskomma.
 *)
CONST FixToFloatMax = 1.0E-5;
CONST FixToFloatMin = 1.0E+6;


(* TimeConvert: *)

CONST StdDateExp = 1;                   (* 1: t-m-j, 2: m-t-j, 3: j-m-t, 4: j-t-m *)

(* Ausgabeform des Datums bei 'TimeConvert.DateToText': *)
CONST StdDateMask = 'DD.MM.YYYY';

CONST StdTimeExp = 0;               (* noch unbenutzt *)
CONST StdTimeMask = 'HH:MM:SS';

(*
 * Trennzeichen fuer ReadToken und die Read-Funktionen aus NumberIO.
 * Beim Lesen werden fuehrende Trennzeichen ignoriert (ausgefiltert),
 * sodass ein mit ReadToken gelesener String nie ein Trennzeichen
 * enthalten kann.
 *
 * Standardwert:  CHARSET {0C..' '};
 *   (das sind alle Control-Zeichen sowie das Leerzeichen)
 *)
CONST Separators = CHARSET{0C..' '};


(* Exceptions, ErrBase, HdlError *)

TYPE ConfigErrMsg = RECORD
   errNo: INTEGER16;
   errMsg: ARRAY[0..31] OF CHAR;
END;
ConfigErrMsgPtr = POINTER TO ConfigErrMsg;

(*
 * Zeigt auf ein dynamisch grosses Feld mit Texten fuer moeglichst alle
 * in 'MOSGlobals' definierten Laufzeitfehler.
 * Format siehe 'FileErrMsg'.
 *)
VAR RuntimeErrMsg: ConfigErrMsgPtr;


(* Files, Directories *)

(*
 * Zeigt auf ein dynamisch grosses Feld mit Texten fuer moeglichst alle
 * in 'MOSGlobals' definierten Dateifehler.
 *
 * Format:
 * Die Anzahl der Feldelemente ist um Eins groesser als die Anzahl benutzter
 * Meldungstexte, dabei muessen hintereinander alle Fehlernummern in belie-
 * biger Reihenfolge mit ihren zugehoerigen Texten stehen, als Abschluss
 * dann eine beliebige Fehlernummer mit einem Leertext. Wird ein Text fuer
 * eine nicht vorkommende Fehlernummer gesucht, wird, jenachdem, ob die
 * Fehlernummer positiv oder negativ ist, der Text fuer Fehlernummer
 * 32767 bzw. -32768 verwendet.
 * Wenn ein Text das Zeichen '@' enhaelt, wird dafuer die Fehlernummer ein-
 * gesetzt.
 * Ein Beispiel fuer ein solches Textfeld findet sich in dem Modulsource
 * 'GEMError.I'.
 *)
VAR FileErrMsg: ConfigErrMsgPtr;


(* ErrBase: *)

(*
 * Bestimmt, welche Exceptions abgefangen werden sollen.
 * (TRAP #6, Ueberlauf, Bus-Fehler, Adress-Fehler, Illegale Instruktion)
 *)
VAR CaughtExceptions: ExcSet;

(*
 * Bestimmt, welche von den abzufangenden Exceptions zeitweise nicht
 * behandelt werden sollen. Damit ist es moeglich, kurzzeitig von einem
 * zuvor installierten Monitor die Exception behandeln zu lassen.
 *)
VAR IgnoreExceptions: ExcSet;


(* Storage/StorBase: *)

(*
 * Mindestgroesse der bei StorBase (GEMDOS) angeforderten Bloecke.
 * Beim Wert Null bestimmt Storage selbst den optimalen Wert
 * (Verfuegbarer Speicher DIV 40). Maximalwert: 7F00H.
 * Normalerweise nicht veraendern!
 *)
VAR MaxBlSize: CSIZE_T;                         (* (0) *)

(*
 * Bestimmt, ob StorBase in die Speicherverwaltung des GEMDOS eingreifen
 * darf. Mehr dazu im Modul StorBase.
 *)
CONST ExtendedMemoryAccess = TRUE;              (* (TRUE) *)


(* Runtime/Coroutinen: *)

(*
 * Werden Coroutinen benutzt, muss das Modula-System dazu einen TRAP-Vektor
 * belegen. Der gewaehlte TRAP-Vektor darf waehrenddessen nicht von anderen
 * Programmen benutzt werden. Soll ein anderer TRAP als der voreingestellte
 * verwendet werden, muss diese Variable lediglich vor dem ersten Aufruf
 * von NEWPROCESS entsprechend gesetzt werden. Beim ersten NEWPROCESS
 * wird der TRAP-Vektor dann belegt und wird erst bei Beenden des Programms
 * wieder freigegeben (der vorherige Wert wird restauriert). Werden Corou-
 * tinen in residenten Programmen oder Accessories verwendet, bleibt der
 * Vektor dauerhaft belegt. Sollen mehrere Megamax-Programme mit Coroutinen
 * gleichzeitig im Speicher sein (z.B. als ACCs), duerfen sie ruhig alle
 * den selben TRAP-Vektor benutzen.
 * Protos benutzt beispielsweise auch den TRAP Nr. 4 mit der selben
 * Funktion. So gibt es mit diesem residenten Programm keine Probleme.
 *
 * Bei Installation des TRAP-Vektors wird die XBRA-Kennung "MM2C" verwendet.
 *)
CONST CoroutineTrapNo = 4;                   (* (4) *)

END MOSConfig.
